
controlna_minzuik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005830  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb4  08005cb4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005cb4  08005cb4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cb4  08005cb4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00015cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001bc  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101c5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000201c  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00032290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00033028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021277  00000000  00000000  00033cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001022c  00000000  00000000  00054f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c54ba  00000000  00000000  0006519b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a655  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004454  00000000  00000000  0012a6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059a8 	.word	0x080059a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080059a8 	.word	0x080059a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <randomWordsUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
////функція для рандомної генерації слів
void randomWordsUART() {
 80002a0:	b5b0      	push	{r4, r5, r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0

	gamestart = 1;//піднімаємо флаг, повідомлення що гра почалась
 80002a6:	4b39      	ldr	r3, [pc, #228]	; (800038c <randomWordsUART+0xec>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]

    const char* words[] = {"Arendarchuk", "Bilan", "Blikha", "Boytsun", "Vdovychenko", "Heinysh", "Kanteruk",
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <randomWordsUART+0xf0>)
 80002ae:	463c      	mov	r4, r7
 80002b0:	461d      	mov	r5, r3
 80002b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	682b      	ldr	r3, [r5, #0]
 80002c0:	6023      	str	r3, [r4, #0]
			"Kidyk", "Kilyushyk", "Kyryk", "Krekhovets", "Madych", "Nalysnyk"};
    const int numWords = sizeof(words) / sizeof(words[0]);
 80002c2:	230d      	movs	r3, #13
 80002c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (GAME_TIME > cnt_word) {
 80002c6:	e058      	b.n	800037a <randomWordsUART+0xda>
        int randomIndex = rand() % numWords;
 80002c8:	f004 f968 	bl	800459c <rand>
 80002cc:	4603      	mov	r3, r0
 80002ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80002d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80002d6:	fb01 f202 	mul.w	r2, r1, r2
 80002da:	1a9b      	subs	r3, r3, r2
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
        const char* randomWord = words[randomIndex];
 80002de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	3340      	adds	r3, #64	; 0x40
 80002e4:	443b      	add	r3, r7
 80002e6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34

        //тут не можу використовуватись переривання програма починає працювати криво
        HAL_UART_Transmit(&huart2, (uint8_t*)randomWord, strlen(randomWord), HAL_MAX_DELAY);
 80002ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80002ee:	f7ff ff79 	bl	80001e4 <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80002fc:	4825      	ldr	r0, [pc, #148]	; (8000394 <randomWordsUART+0xf4>)
 80002fe:	f003 f8cd 	bl	800349c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, "\r\n", strlen("\r\n"),HAL_MAX_DELAY);
 8000302:	f04f 33ff 	mov.w	r3, #4294967295
 8000306:	2202      	movs	r2, #2
 8000308:	4923      	ldr	r1, [pc, #140]	; (8000398 <randomWordsUART+0xf8>)
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <randomWordsUART+0xf4>)
 800030c:	f003 f8c6 	bl	800349c <HAL_UART_Transmit>

        // Порівнюємо отриманий рядок зі словом CODOVE SLOVO
        if (strcmp(randomWord, CODOVE_SLOVO) == 0)
 8000310:	4922      	ldr	r1, [pc, #136]	; (800039c <randomWordsUART+0xfc>)
 8000312:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000314:	f7ff ff5c 	bl	80001d0 <strcmp>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d11f      	bne.n	800035e <randomWordsUART+0xbe>
        {
        	//прописати щоб навіть якщо кнопка не натискається, коли приходить знов кодове слово
        	//в масив записувався результат від минулої появи до слова до теперішньої
       	if(button==0)
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <randomWordsUART+0x100>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10a      	bne.n	800033c <randomWordsUART+0x9c>
       	{
        	pressCount++;//інкрементуємо довжину масиву, після кожного нажаття кнопки
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <randomWordsUART+0x104>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	4a1d      	ldr	r2, [pc, #116]	; (80003a4 <randomWordsUART+0x104>)
 800032e:	6013      	str	r3, [r2, #0]
        	pressTimes[pressCount]=100; // Зчитуємо затримку та записуємо її в ячейку масива
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <randomWordsUART+0x104>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <randomWordsUART+0x108>)
 8000336:	2164      	movs	r1, #100	; 0x64
 8000338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	button == 1;
        }

       	if(button == 1)
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <randomWordsUART+0x100>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d102      	bne.n	800034a <randomWordsUART+0xaa>
        	ctn_seconds=0;
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <randomWordsUART+0x10c>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
        	wordTrue = 1;//переводимо змінну флагу в 1, щоб при натисканні закінчувалась інкрементація таймера
 800034a:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <randomWordsUART+0x110>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
        	HAL_TIM_Base_Start_IT(&htim2);//стартуємо роботу таймера
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <randomWordsUART+0x114>)
 8000352:	f002 fc4b 	bl	8002bec <HAL_TIM_Base_Start_IT>
        	__HAL_TIM_SET_COUNTER(&htim2 , 0);//скидаємо значення таймера до нуля
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <randomWordsUART+0x114>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
            //HAL_UART_Transmit_IT(&huart2, (uint8_t*)"OK\r\n", strlen("OK\r\n"));
            button == 0;
        }
        HAL_Delay(GENERATION_SPEED);
 800035e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000362:	f000 fdd1 	bl	8000f08 <HAL_Delay>
        cnt_word++;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <randomWordsUART+0x118>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <randomWordsUART+0x118>)
 800036e:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000370:	2120      	movs	r1, #32
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f001 f915 	bl	80015a4 <HAL_GPIO_TogglePin>
    while (GAME_TIME > cnt_word) {
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <randomWordsUART+0x118>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b31      	cmp	r3, #49	; 0x31
 8000380:	dda2      	ble.n	80002c8 <randomWordsUART+0x28>
    }
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3740      	adds	r7, #64	; 0x40
 8000388:	46bd      	mov	sp, r7
 800038a:	bdb0      	pop	{r4, r5, r7, pc}
 800038c:	2000020d 	.word	0x2000020d
 8000390:	08005a44 	.word	0x08005a44
 8000394:	2000012c 	.word	0x2000012c
 8000398:	08005a40 	.word	0x08005a40
 800039c:	080059e4 	.word	0x080059e4
 80003a0:	20000004 	.word	0x20000004
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200001b8 	.word	0x200001b8
 80003ac:	20000208 	.word	0x20000208
 80003b0:	2000020c 	.word	0x2000020c
 80003b4:	20000094 	.word	0x20000094
 80003b8:	200001b4 	.word	0x200001b4

080003bc <delay>:
//функція для затримки через цикл
//класична HAL_Delay в функції обробки переривання не працює!
//через таймер не працювало(
void delay(uint16_t second)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	80fb      	strh	r3, [r7, #6]
	uint32_t count = second * (SystemCoreClock / 1000000);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <delay+0x44>)
 80003ca:	6812      	ldr	r2, [r2, #0]
 80003cc:	490d      	ldr	r1, [pc, #52]	; (8000404 <delay+0x48>)
 80003ce:	fba1 1202 	umull	r1, r2, r1, r2
 80003d2:	0c92      	lsrs	r2, r2, #18
 80003d4:	fb02 f303 	mul.w	r3, r2, r3
 80003d8:	60bb      	str	r3, [r7, #8]

	  for (uint32_t i = 0; i < count; i++)
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	e003      	b.n	80003e8 <delay+0x2c>
	  {
	    __NOP();
 80003e0:	bf00      	nop
	  for (uint32_t i = 0; i < count; i++)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d3f7      	bcc.n	80003e0 <delay+0x24>
	  }
}
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000008 	.word	0x20000008
 8000404:	431bde83 	.word	0x431bde83

08000408 <start_game>:

//функція початку гри
void start_game(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b094      	sub	sp, #80	; 0x50
 800040c:	af00      	add	r7, sp, #0
	  char tx_buffer[] = "Hello player, can you start game?\n\rIf you are ready, press the button!\r ";
 800040e:	4a23      	ldr	r2, [pc, #140]	; (800049c <start_game+0x94>)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4611      	mov	r1, r2
 8000414:	2249      	movs	r2, #73	; 0x49
 8000416:	4618      	mov	r0, r3
 8000418:	f004 f8aa 	bl	8004570 <memcpy>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer));
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fee0 	bl	80001e4 <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	b29a      	uxth	r2, r3
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	4619      	mov	r1, r3
 800042c:	481c      	ldr	r0, [pc, #112]	; (80004a0 <start_game+0x98>)
 800042e:	f003 f8bf 	bl	80035b0 <HAL_UART_Transmit_IT>

	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1)
 8000432:	e00f      	b.n	8000454 <start_game+0x4c>
	  {
		  char tx_buffer[]=".";
 8000434:	232e      	movs	r3, #46	; 0x2e
 8000436:	803b      	strh	r3, [r7, #0]
		  HAL_UART_Transmit_IT(&huart2,(uint8_t*)tx_buffer,strlen(tx_buffer));
 8000438:	463b      	mov	r3, r7
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fed2 	bl	80001e4 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	b29a      	uxth	r2, r3
 8000444:	463b      	mov	r3, r7
 8000446:	4619      	mov	r1, r3
 8000448:	4815      	ldr	r0, [pc, #84]	; (80004a0 <start_game+0x98>)
 800044a:	f003 f8b1 	bl	80035b0 <HAL_UART_Transmit_IT>
		  HAL_Delay(200);
 800044e:	20c8      	movs	r0, #200	; 0xc8
 8000450:	f000 fd5a 	bl	8000f08 <HAL_Delay>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1)
 8000454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <start_game+0x9c>)
 800045a:	f001 f873 	bl	8001544 <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d0e7      	beq.n	8000434 <start_game+0x2c>
	  }
	  HAL_UART_Transmit(&huart2, "\r\nCodove slovo:",strlen("\r\nCodove slovo:"), HAL_MAX_DELAY); // Вивести слово через UART2
 8000464:	f04f 33ff 	mov.w	r3, #4294967295
 8000468:	220f      	movs	r2, #15
 800046a:	490f      	ldr	r1, [pc, #60]	; (80004a8 <start_game+0xa0>)
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <start_game+0x98>)
 800046e:	f003 f815 	bl	800349c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)CODOVE_SLOVO, strlen(CODOVE_SLOVO), HAL_MAX_DELAY); // Вивести слово через UART2
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	220b      	movs	r2, #11
 8000478:	490c      	ldr	r1, [pc, #48]	; (80004ac <start_game+0xa4>)
 800047a:	4809      	ldr	r0, [pc, #36]	; (80004a0 <start_game+0x98>)
 800047c:	f003 f80e 	bl	800349c <HAL_UART_Transmit>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"\r\n", strlen("\r\n"));
 8000480:	2202      	movs	r2, #2
 8000482:	490b      	ldr	r1, [pc, #44]	; (80004b0 <start_game+0xa8>)
 8000484:	4806      	ldr	r0, [pc, #24]	; (80004a0 <start_game+0x98>)
 8000486:	f003 f893 	bl	80035b0 <HAL_UART_Transmit_IT>
	  HAL_Delay(3000);
 800048a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800048e:	f000 fd3b 	bl	8000f08 <HAL_Delay>
}
 8000492:	bf00      	nop
 8000494:	3750      	adds	r7, #80	; 0x50
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	08005a88 	.word	0x08005a88
 80004a0:	2000012c 	.word	0x2000012c
 80004a4:	48000800 	.word	0x48000800
 80004a8:	08005a78 	.word	0x08005a78
 80004ac:	080059e4 	.word	0x080059e4
 80004b0:	08005a40 	.word	0x08005a40

080004b4 <game_over>:

//функція закінченя гри
void game_over(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b087      	sub	sp, #28
 80004b8:	af02      	add	r7, sp, #8
	gamestart = 0;//опускаємо флаг, повідомлення що гра закінчилась
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <game_over+0xe4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
	char tx_buffer[]="\nGAME_OVER!\n";
 80004c0:	4b36      	ldr	r3, [pc, #216]	; (800059c <game_over+0xe8>)
 80004c2:	463c      	mov	r4, r7
 80004c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004c6:	c407      	stmia	r4!, {r0, r1, r2}
 80004c8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, strlen(tx_buffer),HAL_MAX_DELAY);
 80004ca:	463b      	mov	r3, r7
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe89 	bl	80001e4 <strlen>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4639      	mov	r1, r7
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	4830      	ldr	r0, [pc, #192]	; (80005a0 <game_over+0xec>)
 80004de:	f002 ffdd 	bl	800349c <HAL_UART_Transmit>

	findMinMaxSum(pressTimes, pressCount, &cnt_pnts_best, &cnt_pnts_lower, &cnt_pnts_summary);
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <game_over+0xf0>)
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <game_over+0xf4>)
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <game_over+0xf8>)
 80004ec:	4a30      	ldr	r2, [pc, #192]	; (80005b0 <game_over+0xfc>)
 80004ee:	4831      	ldr	r0, [pc, #196]	; (80005b4 <game_over+0x100>)
 80004f0:	f000 f8e2 	bl	80006b8 <findMinMaxSum>
	//void findMinMaxSum(int arr[], int size, int *min, int *max, int *sum)
	char tx_buffer1[0];

	//сумарний результат
	HAL_UART_Transmit(&huart2,"Your total result: ",strlen("Your total result: ") ,HAL_MAX_DELAY);
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	2213      	movs	r2, #19
 80004fa:	492f      	ldr	r1, [pc, #188]	; (80005b8 <game_over+0x104>)
 80004fc:	4828      	ldr	r0, [pc, #160]	; (80005a0 <game_over+0xec>)
 80004fe:	f002 ffcd 	bl	800349c <HAL_UART_Transmit>
	sprintf(tx_buffer, "%d ms \n ", cnt_pnts_summary);
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <game_over+0xf4>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	463b      	mov	r3, r7
 8000508:	492c      	ldr	r1, [pc, #176]	; (80005bc <game_over+0x108>)
 800050a:	4618      	mov	r0, r3
 800050c:	f004 f884 	bl	8004618 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, strlen(tx_buffer),HAL_MAX_DELAY);
 8000510:	463b      	mov	r3, r7
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe66 	bl	80001e4 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	4639      	mov	r1, r7
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	481f      	ldr	r0, [pc, #124]	; (80005a0 <game_over+0xec>)
 8000524:	f002 ffba 	bl	800349c <HAL_UART_Transmit>

	//гірший результат
	HAL_UART_Transmit(&huart2,"Your lower result: ",strlen("Your lower result:"),HAL_MAX_DELAY);
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	2212      	movs	r2, #18
 800052e:	4924      	ldr	r1, [pc, #144]	; (80005c0 <game_over+0x10c>)
 8000530:	481b      	ldr	r0, [pc, #108]	; (80005a0 <game_over+0xec>)
 8000532:	f002 ffb3 	bl	800349c <HAL_UART_Transmit>
	sprintf(tx_buffer, "%d ms \n", cnt_pnts_lower);
 8000536:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <game_over+0xf8>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	463b      	mov	r3, r7
 800053c:	4921      	ldr	r1, [pc, #132]	; (80005c4 <game_over+0x110>)
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f86a 	bl	8004618 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, strlen(tx_buffer),HAL_MAX_DELAY);
 8000544:	463b      	mov	r3, r7
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe4c 	bl	80001e4 <strlen>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	4639      	mov	r1, r7
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <game_over+0xec>)
 8000558:	f002 ffa0 	bl	800349c <HAL_UART_Transmit>

	//ліпший результат
	HAL_UART_Transmit(&huart2,"Your best result: ",strlen("Your best result:"),HAL_MAX_DELAY);
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	2211      	movs	r2, #17
 8000562:	4919      	ldr	r1, [pc, #100]	; (80005c8 <game_over+0x114>)
 8000564:	480e      	ldr	r0, [pc, #56]	; (80005a0 <game_over+0xec>)
 8000566:	f002 ff99 	bl	800349c <HAL_UART_Transmit>
	sprintf(tx_buffer, "%d ms \n", cnt_pnts_best);
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <game_over+0xfc>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	463b      	mov	r3, r7
 8000570:	4914      	ldr	r1, [pc, #80]	; (80005c4 <game_over+0x110>)
 8000572:	4618      	mov	r0, r3
 8000574:	f004 f850 	bl	8004618 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, strlen(tx_buffer),HAL_MAX_DELAY);
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe32 	bl	80001e4 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	4639      	mov	r1, r7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <game_over+0xec>)
 800058c:	f002 ff86 	bl	800349c <HAL_UART_Transmit>
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	2000020d 	.word	0x2000020d
 800059c:	08005b24 	.word	0x08005b24
 80005a0:	2000012c 	.word	0x2000012c
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000214 	.word	0x20000214
 80005ac:	20000210 	.word	0x20000210
 80005b0:	20000218 	.word	0x20000218
 80005b4:	200001b8 	.word	0x200001b8
 80005b8:	08005ad4 	.word	0x08005ad4
 80005bc:	08005ae8 	.word	0x08005ae8
 80005c0:	08005af4 	.word	0x08005af4
 80005c4:	08005b08 	.word	0x08005b08
 80005c8:	08005b10 	.word	0x08005b10

080005cc <HAL_GPIO_EXTI_Callback>:

//функція обробки переривань від натискання кнопки
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	// Перевірка,від якої лінії прийшло переривання
	 if(GPIO_Pin == BUTTON_PIN)
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005dc:	d142      	bne.n	8000664 <HAL_GPIO_EXTI_Callback+0x98>
	 {
		delay(400);//затримки для унеможливлення деренчання контактів
 80005de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005e2:	f7ff feeb 	bl	80003bc <delay>
		if(HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN)==0)
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005ec:	f000 ffaa 	bl	8001544 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d136      	bne.n	8000664 <HAL_GPIO_EXTI_Callback+0x98>
		{
			//char tx_buffer[] = "Button pressed!\n";//відправка повідомлення, що кнопка натиснута
			//HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer));

			if(gamestart == 1)
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d032      	beq.n	8000664 <HAL_GPIO_EXTI_Callback+0x98>
			{
			if( wordTrue == 1)//перевірка флага, який відповідає за те що кодове слово рівне слову
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d019      	beq.n	800063a <HAL_GPIO_EXTI_Callback+0x6e>
                {
				HAL_TIM_Base_Stop(&htim2);//зупинка роботи таймера
 8000606:	481c      	ldr	r0, [pc, #112]	; (8000678 <HAL_GPIO_EXTI_Callback+0xac>)
 8000608:	f002 fac9 	bl	8002b9e <HAL_TIM_Base_Stop>
				pressCount++;//інкрементуємо довжину масиву, після кожного нажаття кнопки
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a1a      	ldr	r2, [pc, #104]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000614:	6013      	str	r3, [r2, #0]
				pressTimes[pressCount]=ctn_seconds; // Зчитуємо затримку та записуємо її в ячейку масива
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4611      	mov	r1, r2
 8000620:	4a18      	ldr	r2, [pc, #96]	; (8000684 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000622:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				ctn_seconds=0;//обнуляємо значення затримки
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
				wordTrue = 0;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_GPIO_EXTI_Callback+0xa8>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
				button = 1;//піднімаємо флаг, що кнопка була натиснута
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e011      	b.n	800065e <HAL_GPIO_EXTI_Callback+0x92>
                }
			else if(wordTrue == 0)//якщо гравець натиснув кнопку
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_GPIO_EXTI_Callback+0xa8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00a      	beq.n	800065e <HAL_GPIO_EXTI_Callback+0x92>
			{
				pressCount++;//інкрементуємо довжину масиву, після кожного нажаття кнопки
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000650:	6013      	str	r3, [r2, #0]
				pressTimes[pressCount]=100; // Зчитуємо затримку та записуємо її в ячейку масива
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000658:	2164      	movs	r1, #100	; 0x64
 800065a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			button = 0;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	48000800 	.word	0x48000800
 8000670:	2000020d 	.word	0x2000020d
 8000674:	2000020c 	.word	0x2000020c
 8000678:	20000094 	.word	0x20000094
 800067c:	20000000 	.word	0x20000000
 8000680:	20000208 	.word	0x20000208
 8000684:	200001b8 	.word	0x200001b8
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_TIM_PeriodElapsedCallback>:
//функція обробки переривань від таймера, якщо таймер перевищує задане значення
//інкрементується змінна ctn_seconds
//таймер займається обрахунком часу затримки від появи кодового слова до натискання кнопки
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800069c:	d104      	bne.n	80006a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        ctn_seconds++;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006a6:	6013      	str	r3, [r2, #0]
    }
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000208 	.word	0x20000208

080006b8 <findMinMaxSum>:

//функція для пошуку найбільшого та найменшого та сумарного значення
void findMinMaxSum(int arr[], int size, int *min, int *max, int *sum) {
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
    if (size <= 0) {
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dc0b      	bgt.n	80006e4 <findMinMaxSum+0x2c>
        // Якщо розмір масиву менший або рівний 0, немає елементів для аналізу
        *min = *max = *sum = 0; // Можна задати інші значення за замовчуванням
 80006cc:	6a3b      	ldr	r3, [r7, #32]
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
        return;
 80006e2:	e05b      	b.n	800079c <findMinMaxSum+0xe4>
    }

    *min = *max = arr[0]; // Початкове значення мінімуму та максимуму - перший елемент масиву
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	601a      	str	r2, [r3, #0]
    *sum = arr[0]; // Початкове значення суми - перший елемент масиву
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e048      	b.n	8000794 <findMinMaxSum+0xdc>
    {
        if (arr[i] > *max) {
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	dd14      	ble.n	800073e <findMinMaxSum+0x86>
        	if(arr[i] > 2)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b02      	cmp	r3, #2
 8000720:	dd0d      	ble.n	800073e <findMinMaxSum+0x86>
        	{
        		if(arr[i]!=100)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	4413      	add	r3, r2
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b64      	cmp	r3, #100	; 0x64
 800072e:	d006      	beq.n	800073e <findMinMaxSum+0x86>
        		{
            // Якщо поточний елемент менший за мінімум, оновлюємо значення мінімуму
            *max = arr[i];
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	601a      	str	r2, [r3, #0]
        	}
        	}
        }
        if (arr[i] < *min)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	da14      	bge.n	800077a <findMinMaxSum+0xc2>
        {
            // Якщо поточний елемент більший за максимум, оновлюємо значення максимуму
        	if(arr[i] > 2)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	4413      	add	r3, r2
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b02      	cmp	r3, #2
 800075c:	dd0d      	ble.n	800077a <findMinMaxSum+0xc2>
        	 {
        		if(arr[i]!=100)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b64      	cmp	r3, #100	; 0x64
 800076a:	d006      	beq.n	800077a <findMinMaxSum+0xc2>
        		{
        			// Якщо поточний елемент менший за мінімум, оновлюємо значення мінімуму
        			 *min = arr[i];
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
        		}
        	  }
        }
        *sum += arr[i]; // Додаємо поточний елемент до суми
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	68f9      	ldr	r1, [r7, #12]
 8000784:	440b      	add	r3, r1
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	441a      	add	r2, r3
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbb2      	blt.n	8000702 <findMinMaxSum+0x4a>
    }
}
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fb47 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f811 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f8cf 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 f89d 	bl	80008f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007ba:	f000 f84d 	bl	8000858 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start_game();//початок гри
 80007be:	f7ff fe23 	bl	8000408 <start_game>
	  randomWordsUART();
 80007c2:	f7ff fd6d 	bl	80002a0 <randomWordsUART>
	  game_over();
 80007c6:	f7ff fe75 	bl	80004b4 <game_over>
	  HAL_Delay(1000*10);
 80007ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80007ce:	f000 fb9b 	bl	8000f08 <HAL_Delay>
	  start_game();//початок гри
 80007d2:	e7f4      	b.n	80007be <main+0x18>

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b090      	sub	sp, #64	; 0x40
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 fed2 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fe:	2310      	movs	r3, #16
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800080a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fef7 	bl	8001608 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000820:	f000 f906 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 ff20 	bl	8002684 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800084a:	f000 f8f1 	bl	8000a30 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3740      	adds	r7, #64	; 0x40
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000876:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_TIM2_Init+0x98>)
 8000878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_TIM2_Init+0x98>)
 8000880:	223f      	movs	r2, #63	; 0x3f
 8000882:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM2_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM2_Init+0x98>)
 800088c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_TIM2_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM2_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_TIM2_Init+0x98>)
 80008a0:	f002 f926 	bl	8002af0 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008aa:	f000 f8c1 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_TIM2_Init+0x98>)
 80008bc:	f002 fb11 	bl	8002ee2 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008c6:	f000 f8b3 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_TIM2_Init+0x98>)
 80008d8:	f002 fd06 	bl	80032e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008e2:	f000 f8a5 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000094 	.word	0x20000094

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	f002 fd62 	bl	8003400 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f875 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000012c 	.word	0x2000012c
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_GPIO_Init+0xd4>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_GPIO_Init+0xd4>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a22      	ldr	r2, [pc, #136]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2120      	movs	r1, #32
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 fdcf 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0xd8>)
 80009ee:	f000 fc37 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fc28 	bl	8001260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2028      	movs	r0, #40	; 0x28
 8000a16:	f000 fb76 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a1a:	2028      	movs	r0, #40	; 0x28
 8000a1c:	f000 fb8f 	bl	800113e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000800 	.word	0x48000800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_MspInit+0x44>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_MspInit+0x44>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x44>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f000 fb3c 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a94:	d114      	bne.n	8000ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	201c      	movs	r0, #28
 8000ab4:	f000 fb27 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab8:	201c      	movs	r0, #28
 8000aba:	f000 fb40 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000abe:	e018      	b.n	8000af2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_TIM_Base_MspInit+0x7c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d113      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_TIM_Base_MspInit+0x78>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	201d      	movs	r0, #29
 8000ae8:	f000 fb0d 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aec:	201d      	movs	r0, #29
 8000aee:	f000 fb26 	bl	800113e <HAL_NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40000400 	.word	0x40000400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x8c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d130      	bne.n	8000b88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0x90>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 fb74 	bl	8001260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2026      	movs	r0, #38	; 0x26
 8000b7e:	f000 fac2 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b82:	2026      	movs	r0, #38	; 0x26
 8000b84:	f000 fadb 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	; 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40021000 	.word	0x40021000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f970 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM2_IRQHandler+0x10>)
 8000bf2:	f002 f857 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000094 	.word	0x20000094

08000c00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM3_IRQHandler+0x10>)
 8000c06:	f002 f84d 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000e0 	.word	0x200000e0

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f002 fd27 	bl	800366c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c30:	f000 fcd2 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_kill>:

int _kill(int pid, int sig)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c52:	f003 fc63 	bl	800451c <__errno>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2216      	movs	r2, #22
 8000c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_exit>:

void _exit (int status)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe7 	bl	8000c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c7a:	e7fe      	b.n	8000c7a <_exit+0x12>

08000c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
  }

  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e009      	b.n	8000cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf1      	blt.n	8000cc8 <_write+0x12>
  }
  return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_close>:

int _close(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d16:	605a      	str	r2, [r3, #4]
  return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_isatty>:

int _isatty(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f003 fbc8 	bl	800451c <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20003000 	.word	0x20003000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	2000021c 	.word	0x2000021c
 8000dc0:	20000238 	.word	0x20000238

08000dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f003 fb87 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff fcc4 	bl	80007a6 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e20:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e2c:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8000e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e34:	20000234 	.word	0x20000234

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x28>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f94f 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fdf0 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f967 	bl	800115a <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f92f 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	2000000c 	.word	0x2000000c

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000220 	.word	0x20000220

08000ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000220 	.word	0x20000220

08000f08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000010 	.word	0x20000010

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001180:	2b02      	cmp	r3, #2
 8001182:	d008      	beq.n	8001196 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e020      	b.n	80011d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 020e 	bic.w	r2, r2, #14
 80011a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
 80011c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d005      	beq.n	8001206 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2204      	movs	r2, #4
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e027      	b.n	8001256 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 020e 	bic.w	r2, r2, #14
 8001214:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	4798      	blx	r3
    } 
  }
  return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e14e      	b.n	800150e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8140 	beq.w	8001508 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d005      	beq.n	80012a0 <HAL_GPIO_Init+0x40>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d130      	bne.n	8001302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d6:	2201      	movs	r2, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 0201 	and.w	r2, r3, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b03      	cmp	r3, #3
 800130c:	d017      	beq.n	800133e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d123      	bne.n	8001392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0203 	and.w	r2, r3, #3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 809a 	beq.w	8001508 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b55      	ldr	r3, [pc, #340]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a54      	ldr	r2, [pc, #336]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b52      	ldr	r3, [pc, #328]	; (800152c <HAL_GPIO_Init+0x2cc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1e0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a46      	ldr	r2, [pc, #280]	; (8001534 <HAL_GPIO_Init+0x2d4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1dc>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a45      	ldr	r2, [pc, #276]	; (8001538 <HAL_GPIO_Init+0x2d8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1d8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a44      	ldr	r2, [pc, #272]	; (800153c <HAL_GPIO_Init+0x2dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1d4>
 8001430:	2303      	movs	r3, #3
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001434:	2305      	movs	r3, #5
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x1e2>
 8001440:	2300      	movs	r3, #0
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001452:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x2d0>)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_GPIO_Init+0x2e0>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f aea9 	bne.w	8001270 <HAL_GPIO_Init+0x10>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	48000c00 	.word	0x48000c00
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e002      	b.n	8001598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	041a      	lsls	r2, r3, #16
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43d9      	mvns	r1, r3
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	400b      	ands	r3, r1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffe8 	bl	80005cc <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800160e:	af00      	add	r7, sp, #0
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	f001 b823 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 817d 	beq.w	800193e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001644:	4bbc      	ldr	r3, [pc, #752]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4bb9      	ldr	r3, [pc, #740]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d15c      	bne.n	8001716 <HAL_RCC_OscConfig+0x10e>
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d155      	bne.n	8001716 <HAL_RCC_OscConfig+0x10e>
 800166a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800167e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <HAL_RCC_OscConfig+0x94>
 8001696:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	e015      	b.n	80016c8 <HAL_RCC_OscConfig+0xc0>
 800169c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016b8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016c4:	4b9c      	ldr	r3, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016d4:	fa92 f2a2 	rbit	r2, r2
 80016d8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016dc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016e0:	fab2 f282 	clz	r2, r2
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	f002 021f 	and.w	r2, r2, #31
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 811f 	beq.w	800193c <HAL_RCC_OscConfig+0x334>
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 8116 	bne.w	800193c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f000 bfaf 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x12e>
 8001728:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a82      	ldr	r2, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e036      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x158>
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7b      	ldr	r2, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b79      	ldr	r3, [pc, #484]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a78      	ldr	r2, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e021      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x184>
 8001772:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a70      	ldr	r2, [pc, #448]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6d      	ldr	r2, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x19c>
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f023 020f 	bic.w	r2, r3, #15
 80017ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	495f      	ldr	r1, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d059      	beq.n	8001882 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb8f 	bl	8000ef0 <HAL_GetTick>
 80017d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fb8a 	bl	8000ef0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d902      	bls.n	80017ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	f000 bf43 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 80017ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001802:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	b2db      	uxtb	r3, r3
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x218>
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e015      	b.n	800184c <HAL_RCC_OscConfig+0x244>
 8001820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001824:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001838:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800183c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001850:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001854:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001858:	fa92 f2a2 	rbit	r2, r2
 800185c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001860:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001864:	fab2 f282 	clz	r2, r2
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 021f 	and.w	r2, r2, #31
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ab      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1d0>
 8001880:	e05d      	b.n	800193e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb35 	bl	8000ef0 <HAL_GetTick>
 8001886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fb30 	bl	8000ef0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d902      	bls.n	80018a2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	f000 bee9 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 80018a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2cc>
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e015      	b.n	8001900 <HAL_RCC_OscConfig+0x2f8>
 80018d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_RCC_OscConfig+0x330>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001904:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001908:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800190c:	fa92 f2a2 	rbit	r2, r2
 8001910:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001914:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f002 021f 	and.w	r2, r2, #31
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ab      	bne.n	800188c <HAL_RCC_OscConfig+0x284>
 8001934:	e003      	b.n	800193e <HAL_RCC_OscConfig+0x336>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 817d 	beq.w	8001c4e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001954:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001960:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d172      	bne.n	8001a52 <HAL_RCC_OscConfig+0x44a>
 800196c:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d16c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x44a>
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800198a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3a0>
 80019a2:	4b93      	ldr	r3, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c8>
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019cc:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2202      	movs	r2, #2
 80019d2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019d6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019da:	fa92 f2a2 	rbit	r2, r2
 80019de:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80019e2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_RCC_OscConfig+0x410>
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f000 be2e 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	21f8      	movs	r1, #248	; 0xf8
 8001a2e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a36:	fa91 f1a1 	rbit	r1, r1
 8001a3a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a3e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a42:	fab1 f181 	clz	r1, r1
 8001a46:	b2c9      	uxtb	r1, r1
 8001a48:	408b      	lsls	r3, r1
 8001a4a:	4969      	ldr	r1, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a50:	e0fd      	b.n	8001c4e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8088 	beq.w	8001b74 <HAL_RCC_OscConfig+0x56c>
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fa2e 	bl	8000ef0 <HAL_GetTick>
 8001a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fa29 	bl	8000ef0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d902      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f000 bde2 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ac2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d8>
 8001ada:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x500>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0af      	beq.n	8001a9a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	21f8      	movs	r1, #248	; 0xf8
 8001b50:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b58:	fa91 f1a1 	rbit	r1, r1
 8001b5c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b60:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b64:	fab1 f181 	clz	r1, r1
 8001b68:	b2c9      	uxtb	r1, r1
 8001b6a:	408b      	lsls	r3, r1
 8001b6c:	4920      	ldr	r1, [pc, #128]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e06c      	b.n	8001c4e <HAL_RCC_OscConfig+0x646>
 8001b74:	2301      	movs	r3, #1
 8001b76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f9a6 	bl	8000ef0 <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff f9a1 	bl	8000ef0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d902      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bd5a 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d104      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5ec>
 8001bea:	4b01      	ldr	r3, [pc, #4]	; (8001bf0 <HAL_RCC_OscConfig+0x5e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e015      	b.n	8001c1c <HAL_RCC_OscConfig+0x614>
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c18:	4bc8      	ldr	r3, [pc, #800]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c26:	fa92 f2a2 	rbit	r2, r2
 8001c2a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c32:	fab2 f282 	clz	r2, r2
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f042 0220 	orr.w	r2, r2, #32
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f002 021f 	and.w	r2, r2, #31
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f202 	lsl.w	r2, r1, r2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ad      	bne.n	8001baa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8110 	beq.w	8001e84 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d079      	beq.n	8001d68 <HAL_RCC_OscConfig+0x760>
 8001c74:	2301      	movs	r3, #1
 8001c76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4bab      	ldr	r3, [pc, #684]	; (8001f40 <HAL_RCC_OscConfig+0x938>)
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f927 	bl	8000ef0 <HAL_GetTick>
 8001ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f922 	bl	8000ef0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d902      	bls.n	8001cbe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	f000 bcdb 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d24:	2102      	movs	r1, #2
 8001d26:	6019      	str	r1, [r3, #0]
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f1a3 	rbit	r1, r3
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d3e:	6019      	str	r1, [r3, #0]
  return result;
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0a0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x6a0>
 8001d66:	e08d      	b.n	8001e84 <HAL_RCC_OscConfig+0x87c>
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	fa93 f2a3 	rbit	r2, r3
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d8a:	601a      	str	r2, [r3, #0]
  return result;
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d94:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x938>)
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	461a      	mov	r2, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff f8a1 	bl	8000ef0 <HAL_GetTick>
 8001dae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff f89c 	bl	8000ef0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d902      	bls.n	8001dca <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f000 bc55 	b.w	8002674 <HAL_RCC_OscConfig+0x106c>
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e42:	2102      	movs	r1, #2
 8001e44:	6019      	str	r1, [r3, #0]
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f1a3 	rbit	r1, r3
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e5c:	6019      	str	r1, [r3, #0]
  return result;
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d197      	bne.n	8001db4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 81a1 	beq.w	80021dc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	61d3      	str	r3, [r2, #28]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ed2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCC_OscConfig+0x93c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d11a      	bne.n	8001f1c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_OscConfig+0x93c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <HAL_RCC_OscConfig+0x93c>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fffd 	bl	8000ef0 <HAL_GetTick>
 8001ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	e009      	b.n	8001f10 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7fe fff8 	bl	8000ef0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e3b1      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x93c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCC_OscConfig+0x940>
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a02      	ldr	r2, [pc, #8]	; (8001f3c <HAL_RCC_OscConfig+0x934>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e03c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x9ac>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	10908120 	.word	0x10908120
 8001f44:	40007000 	.word	0x40007000
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x96a>
 8001f58:	4bc1      	ldr	r3, [pc, #772]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4ac0      	ldr	r2, [pc, #768]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	4bbe      	ldr	r3, [pc, #760]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4abd      	ldr	r2, [pc, #756]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e020      	b.n	8001fb4 <HAL_RCC_OscConfig+0x9ac>
 8001f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x994>
 8001f82:	4bb7      	ldr	r3, [pc, #732]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4ab6      	ldr	r2, [pc, #728]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4bb4      	ldr	r3, [pc, #720]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4ab3      	ldr	r2, [pc, #716]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x9ac>
 8001f9c:	4bb0      	ldr	r3, [pc, #704]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4aaf      	ldr	r2, [pc, #700]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4bad      	ldr	r3, [pc, #692]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4aac      	ldr	r2, [pc, #688]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8081 	beq.w	80020c8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7fe ff93 	bl	8000ef0 <HAL_GetTick>
 8001fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff8e 	bl	8000ef0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e345      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
 8001fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002014:	2202      	movs	r2, #2
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800202e:	601a      	str	r2, [r3, #0]
  return result;
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002038:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0xa4c>
 800204e:	4b84      	ldr	r3, [pc, #528]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	e013      	b.n	800207c <HAL_RCC_OscConfig+0xa74>
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002080:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002084:	2102      	movs	r1, #2
 8002086:	6011      	str	r1, [r2, #0]
 8002088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	fa92 f1a2 	rbit	r1, r2
 8002096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800209e:	6011      	str	r1, [r2, #0]
  return result;
 80020a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	f002 021f 	and.w	r2, r2, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d084      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x9c8>
 80020c6:	e07f      	b.n	80021c8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7fe ff12 	bl	8000ef0 <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7fe ff0d 	bl	8000ef0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e2c4      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002130:	601a      	str	r2, [r3, #0]
  return result;
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800213a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0xb4e>
 8002150:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	e013      	b.n	800217e <HAL_RCC_OscConfig+0xb76>
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002182:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002186:	2102      	movs	r1, #2
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800219c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021a0:	6011      	str	r1, [r2, #0]
  return result;
 80021a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d184      	bne.n	80020d2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8242 	beq.w	8002672 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_RCC_OscConfig+0xc58>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	f000 8213 	beq.w	8002622 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b02      	cmp	r3, #2
 800220a:	f040 8162 	bne.w	80024d2 <HAL_RCC_OscConfig+0xeca>
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002216:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800221a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002232:	601a      	str	r2, [r3, #0]
  return result;
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800223c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fe4c 	bl	8000ef0 <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e00c      	b.n	8002278 <HAL_RCC_OscConfig+0xc70>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fe44 	bl	8000ef0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1fd      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800229c:	601a      	str	r2, [r3, #0]
  return result;
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_OscConfig+0xcba>
 80022bc:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	e027      	b.n	8002312 <HAL_RCC_OscConfig+0xd0a>
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	fa93 f2a3 	rbit	r2, r3
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	4b9c      	ldr	r3, [pc, #624]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002316:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800231a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800231e:	6011      	str	r1, [r2, #0]
 8002320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002324:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	fa92 f1a2 	rbit	r1, r2
 800232e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002332:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002336:	6011      	str	r1, [r2, #0]
  return result;
 8002338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f042 0220 	orr.w	r2, r2, #32
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f002 021f 	and.w	r2, r2, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d182      	bne.n	8002264 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	430b      	orrs	r3, r1
 8002380:	497f      	ldr	r1, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800238e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023b4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	2301      	movs	r3, #1
 80023ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd90 	bl	8000ef0 <HAL_GetTick>
 80023d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e009      	b.n	80023ea <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fd8b 	bl	8000ef0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e144      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800240e:	601a      	str	r2, [r3, #0]
  return result;
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_OscConfig+0xe2c>
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e027      	b.n	8002484 <HAL_RCC_OscConfig+0xe7c>
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800243c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002488:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800248c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002496:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	fa92 f1a2 	rbit	r1, r2
 80024a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024a8:	6011      	str	r1, [r2, #0]
  return result;
 80024aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f042 0220 	orr.w	r2, r2, #32
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	f002 021f 	and.w	r2, r2, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d082      	beq.n	80023d6 <HAL_RCC_OscConfig+0xdce>
 80024d0:	e0cf      	b.n	8002672 <HAL_RCC_OscConfig+0x106a>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024f6:	601a      	str	r2, [r3, #0]
  return result;
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002500:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800250c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	461a      	mov	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fcea 	bl	8000ef0 <HAL_GetTick>
 800251c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	e009      	b.n	8002536 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe fce5 	bl	8000ef0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e09e      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800253e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800255a:	601a      	str	r2, [r3, #0]
  return result;
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d104      	bne.n	8002584 <HAL_RCC_OscConfig+0xf7c>
 800257a:	4b01      	ldr	r3, [pc, #4]	; (8002580 <HAL_RCC_OscConfig+0xf78>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e029      	b.n	80025d4 <HAL_RCC_OscConfig+0xfcc>
 8002580:	40021000 	.word	0x40021000
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800258c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x1078>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e0:	6011      	str	r1, [r2, #0]
 80025e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fa92 f1a2 	rbit	r1, r2
 80025f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025f8:	6011      	str	r1, [r2, #0]
  return result;
 80025fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d180      	bne.n	8002522 <HAL_RCC_OscConfig+0xf1a>
 8002620:	e027      	b.n	8002672 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e01e      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_OscConfig+0x1078>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800263e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002642:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	429a      	cmp	r2, r3
 8002654:	d10b      	bne.n	800266e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002656:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800265a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b09e      	sub	sp, #120	; 0x78
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e162      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b90      	ldr	r3, [pc, #576]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	498b      	ldr	r1, [pc, #556]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e14a      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	497f      	ldr	r1, [pc, #508]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80dc 	beq.w	80028b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d13c      	bne.n	800277a <HAL_RCC_ClockConfig+0xf6>
 8002700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002704:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_RCC_ClockConfig+0xa6>
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	e00f      	b.n	800274a <HAL_RCC_ClockConfig+0xc6>
 800272a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
 8002738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273c:	663b      	str	r3, [r7, #96]	; 0x60
 800273e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002746:	4b67      	ldr	r3, [pc, #412]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800274e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002752:	fa92 f2a2 	rbit	r2, r2
 8002756:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002758:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800275a:	fab2 f282 	clz	r2, r2
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f042 0220 	orr.w	r2, r2, #32
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f002 021f 	and.w	r2, r2, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d17b      	bne.n	800286e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0f3      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d13c      	bne.n	80027fc <HAL_RCC_ClockConfig+0x178>
 8002782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d102      	bne.n	80027ac <HAL_RCC_ClockConfig+0x128>
 80027a6:	4b4f      	ldr	r3, [pc, #316]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_ClockConfig+0x148>
 80027ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
 80027ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027be:	643b      	str	r3, [r7, #64]	; 0x40
 80027c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c8:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80027d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d4:	fa92 f2a2 	rbit	r2, r2
 80027d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d13a      	bne.n	800286e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b2      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
 80027fc:	2302      	movs	r3, #2
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d102      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1a0>
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e00d      	b.n	8002840 <HAL_RCC_ClockConfig+0x1bc>
 8002824:	2302      	movs	r3, #2
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
 8002830:	2302      	movs	r3, #2
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2202      	movs	r2, #2
 8002842:	61ba      	str	r2, [r7, #24]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	617a      	str	r2, [r7, #20]
  return result;
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0220 	orr.w	r2, r2, #32
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e079      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	491a      	ldr	r1, [pc, #104]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7fe fb36 	bl	8000ef0 <HAL_GetTick>
 8002884:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fb32 	bl	8000ef0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e061      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d214      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4906      	ldr	r1, [pc, #24]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_RCC_ClockConfig+0x25c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e040      	b.n	8002962 <HAL_RCC_ClockConfig+0x2de>
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	491a      	ldr	r1, [pc, #104]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4912      	ldr	r1, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002926:	f000 f829 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800292a:	4601      	mov	r1, r0
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RCC_ClockConfig+0x2e8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	22f0      	movs	r2, #240	; 0xf0
 8002936:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	60fa      	str	r2, [r7, #12]
  return result;
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	40d3      	lsrs	r3, r2
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x2ec>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	fa21 f303 	lsr.w	r3, r1, r3
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_RCC_ClockConfig+0x2f0>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_RCC_ClockConfig+0x2f4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fa84 	bl	8000e68 <HAL_InitTick>
  
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3778      	adds	r7, #120	; 0x78
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	08005b34 	.word	0x08005b34
 8002974:	20000008 	.word	0x20000008
 8002978:	2000000c 	.word	0x2000000c

0800297c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b08b      	sub	sp, #44	; 0x2c
 8002980:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x30>
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x36>
 80029aa:	e03c      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ae:	623b      	str	r3, [r7, #32]
      break;
 80029b0:	e03c      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	fa92 f2a2 	rbit	r2, r2
 80029c4:	607a      	str	r2, [r7, #4]
  return result;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	40d3      	lsrs	r3, r2
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	220f      	movs	r2, #15
 80029e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	60fa      	str	r2, [r7, #12]
  return result;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	40d3      	lsrs	r3, r2
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
 8002a14:	e004      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	623b      	str	r3, [r7, #32]
      break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a28:	623b      	str	r3, [r7, #32]
      break;
 8002a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	372c      	adds	r7, #44	; 0x2c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	08005b4c 	.word	0x08005b4c
 8002a48:	08005b5c 	.word	0x08005b5c
 8002a4c:	003d0900 	.word	0x003d0900

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a6e:	f7ff ffef 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	fa92 f2a2 	rbit	r2, r2
 8002a88:	603a      	str	r2, [r7, #0]
  return result;
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	40d3      	lsrs	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08005b44 	.word	0x08005b44

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ab2:	f7ff ffcd 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ac0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ac4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	fa92 f2a2 	rbit	r2, r2
 8002acc:	603a      	str	r2, [r7, #0]
  return result;
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	40d3      	lsrs	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08005b44 	.word	0x08005b44

08002af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e049      	b.n	8002b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ffb4 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fac8 	bl	80030c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_TIM_Base_Stop+0x38>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	f240 4344 	movw	r3, #1092	; 0x444
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_Base_Stop+0x38>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e040      	b.n	8002c86 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_TIM_Base_Start_IT+0xa8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x58>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d009      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x58>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_Base_Start_IT+0xac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x58>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_TIM_Base_Start_IT+0xb0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d115      	bne.n	8002c70 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d015      	beq.n	8002c82 <HAL_TIM_Base_Start_IT+0x96>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d011      	beq.n	8002c82 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	e008      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e000      	b.n	8002c84 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	00010007 	.word	0x00010007

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9ce 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9c0 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f9d1 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9a4 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f996 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9a7 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f97a 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f96c 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f97d 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f950 	bl	8003088 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f942 	bl	8003074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f953 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0201 	mvn.w	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd fc32 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fac2 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d10e      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d107      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fab5 	bl	80033ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d10e      	bne.n	8002eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d107      	bne.n	8002eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f901 	bl	80030b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d10e      	bne.n	8002eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0220 	mvn.w	r2, #32
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fa75 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_ConfigClockSource+0x1c>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e0b6      	b.n	800306c <HAL_TIM_ConfigClockSource+0x18a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3a:	d03e      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0xd8>
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	f200 8087 	bhi.w	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	f000 8086 	beq.w	8003058 <HAL_TIM_ConfigClockSource+0x176>
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d87f      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f52:	2b70      	cmp	r3, #112	; 0x70
 8002f54:	d01a      	beq.n	8002f8c <HAL_TIM_ConfigClockSource+0xaa>
 8002f56:	2b70      	cmp	r3, #112	; 0x70
 8002f58:	d87b      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f5a:	2b60      	cmp	r3, #96	; 0x60
 8002f5c:	d050      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x11e>
 8002f5e:	2b60      	cmp	r3, #96	; 0x60
 8002f60:	d877      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f62:	2b50      	cmp	r3, #80	; 0x50
 8002f64:	d03c      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0xfe>
 8002f66:	2b50      	cmp	r3, #80	; 0x50
 8002f68:	d873      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d058      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0x13e>
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d86f      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f72:	2b30      	cmp	r3, #48	; 0x30
 8002f74:	d064      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x15e>
 8002f76:	2b30      	cmp	r3, #48	; 0x30
 8002f78:	d86b      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d060      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x15e>
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d867      	bhi.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d05c      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x15e>
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d05a      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0x15e>
 8002f8a:	e062      	b.n	8003052 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6899      	ldr	r1, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f000 f984 	bl	80032a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
      break;
 8002fb8:	e04f      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f000 f96d 	bl	80032a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fdc:	609a      	str	r2, [r3, #8]
      break;
 8002fde:	e03c      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	461a      	mov	r2, r3
 8002fee:	f000 f8e1 	bl	80031b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2150      	movs	r1, #80	; 0x50
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f93a 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e02c      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	f000 f900 	bl	8003212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2160      	movs	r1, #96	; 0x60
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f92a 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 800301e:	e01c      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	461a      	mov	r2, r3
 800302e:	f000 f8c1 	bl	80031b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f91a 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 800303e:	e00c      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 f911 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8003050:	e003      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      break;
 8003056:	e000      	b.n	800305a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003058:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <TIM_Base_SetConfig+0xdc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x28>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x28>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <TIM_Base_SetConfig+0xe0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d108      	bne.n	80030fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <TIM_Base_SetConfig+0xdc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <TIM_Base_SetConfig+0x6a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d00f      	beq.n	800312e <TIM_Base_SetConfig+0x6a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <TIM_Base_SetConfig+0xe0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_Base_SetConfig+0x6a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <TIM_Base_SetConfig+0xe4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0x6a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <TIM_Base_SetConfig+0xe8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0x6a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <TIM_Base_SetConfig+0xec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d108      	bne.n	8003140 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <TIM_Base_SetConfig+0xdc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_Base_SetConfig+0xc0>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <TIM_Base_SetConfig+0xe4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0xc0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <TIM_Base_SetConfig+0xe8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xc0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <TIM_Base_SetConfig+0xec>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40014400 	.word	0x40014400
 80031b0:	40014800 	.word	0x40014800

080031b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 030a 	bic.w	r3, r3, #10
 80031f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0210 	bic.w	r2, r3, #16
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800323c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	f043 0307 	orr.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e054      	b.n	80033aa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003330:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d009      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10c      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	4313      	orrs	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40014000 	.word	0x40014000

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fb6e 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fc1a 	bl	8003c78 <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fd44 	bl	8003ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fdcb 	bl	8004028 <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d178      	bne.n	80035a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Transmit+0x24>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e071      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2221      	movs	r2, #33	; 0x21
 80034d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d2:	f7fd fd0d 	bl	8000ef0 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x68>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e030      	b.n	8003570 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fe2d 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e03c      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	b292      	uxth	r2, r2
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	3302      	adds	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e008      	b.n	800355e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b292      	uxth	r2, r2
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	3301      	adds	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1c8      	bne.n	800350e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fdf6 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e005      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d147      	bne.n	8003656 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_UART_Transmit_IT+0x22>
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e040      	b.n	8003658 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2221      	movs	r2, #33	; 0x21
 80035fe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d107      	bne.n	800361a <HAL_UART_Transmit_IT+0x6a>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_UART_Transmit_IT+0xb4>)
 8003616:	66da      	str	r2, [r3, #108]	; 0x6c
 8003618:	e002      	b.n	8003620 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a12      	ldr	r2, [pc, #72]	; (8003668 <HAL_UART_Transmit_IT+0xb8>)
 800361e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	61bb      	str	r3, [r7, #24]
   return(result);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e6      	bne.n	8003620 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	372c      	adds	r7, #44	; 0x2c
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	080043f3 	.word	0x080043f3
 8003668:	0800433b 	.word	0x0800433b

0800366c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b0ba      	sub	sp, #232	; 0xe8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003692:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003696:	f640 030f 	movw	r3, #2063	; 0x80f
 800369a:	4013      	ands	r3, r2
 800369c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d115      	bne.n	80036d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00f      	beq.n	80036d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 82ab 	beq.w	8003c20 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
      }
      return;
 80036d2:	e2a5      	b.n	8003c20 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8117 	beq.w	800390c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_UART_IRQHandler+0x298>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 810a 	beq.w	800390c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d011      	beq.n	8003728 <HAL_UART_IRQHandler+0xbc>
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2201      	movs	r2, #1
 8003716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d011      	beq.n	8003758 <HAL_UART_IRQHandler+0xec>
 8003734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2202      	movs	r2, #2
 8003746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d011      	beq.n	8003788 <HAL_UART_IRQHandler+0x11c>
 8003764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2204      	movs	r2, #4
 8003776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377e:	f043 0202 	orr.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2208      	movs	r2, #8
 80037b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <HAL_UART_IRQHandler+0x18a>
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8211 	beq.w	8003c24 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003846:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04f      	beq.n	80038ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fcf9 	bl	8004246 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d141      	bne.n	80038e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3308      	adds	r3, #8
 8003868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800387c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800388e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800389a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1d9      	bne.n	8003862 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <HAL_UART_IRQHandler+0x29c>)
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fc8e 	bl	80011e4 <HAL_DMA_Abort_IT>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00f      	b.n	80038fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9b4 	bl	8003c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00b      	b.n	80038fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9b0 	bl	8003c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e007      	b.n	80038fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f9ac 	bl	8003c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80038fc:	e192      	b.n	8003c24 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fe:	bf00      	nop
    return;
 8003900:	e190      	b.n	8003c24 <HAL_UART_IRQHandler+0x5b8>
 8003902:	bf00      	nop
 8003904:	04000120 	.word	0x04000120
 8003908:	0800430f 	.word	0x0800430f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 814b 	bne.w	8003bac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8144 	beq.w	8003bac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 813d 	beq.w	8003bac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	f040 80b5 	bne.w	8003ab4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003956:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8164 	beq.w	8003c28 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800396a:	429a      	cmp	r2, r3
 800396c:	f080 815c 	bcs.w	8003c28 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b20      	cmp	r3, #32
 8003982:	f000 8086 	beq.w	8003a92 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800399a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800399e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1da      	bne.n	8003986 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3308      	adds	r3, #8
 80039d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e1      	bne.n	80039d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e3      	bne.n	8003a0c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e4      	bne.n	8003a52 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fb70 	bl	8001172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8d7 	bl	8003c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ab2:	e0b9      	b.n	8003c28 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ab 	beq.w	8003c2c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80a6 	beq.w	8003c2c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b02:	647b      	str	r3, [r7, #68]	; 0x44
 8003b04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e4      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	623b      	str	r3, [r7, #32]
   return(result);
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3308      	adds	r3, #8
 8003b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e3      	bne.n	8003b16 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	617b      	str	r3, [r7, #20]
   return(result);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e4      	bne.n	8003b62 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f85b 	bl	8003c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003baa:	e03f      	b.n	8003c2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x56a>
 8003bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fc99 	bl	8004506 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bd4:	e02d      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01c      	beq.n	8003c30 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
    }
    return;
 8003bfe:	e017      	b.n	8003c30 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
 8003c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fc4a 	bl	80044b2 <UART_EndTransmit_IT>
    return;
 8003c1e:	e008      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c20:	bf00      	nop
 8003c22:	e006      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003c30:	bf00      	nop
  }

}
 8003c32:	37e8      	adds	r7, #232	; 0xe8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b8a      	ldr	r3, [pc, #552]	; (8003ecc <UART_SetConfig+0x254>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	6979      	ldr	r1, [r7, #20]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a78      	ldr	r2, [pc, #480]	; (8003ed0 <UART_SetConfig+0x258>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d120      	bne.n	8003d36 <UART_SetConfig+0xbe>
 8003cf4:	4b77      	ldr	r3, [pc, #476]	; (8003ed4 <UART_SetConfig+0x25c>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d817      	bhi.n	8003d30 <UART_SetConfig+0xb8>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x90>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d25 	.word	0x08003d25
 8003d10:	08003d2b 	.word	0x08003d2b
 8003d14:	08003d1f 	.word	0x08003d1f
 8003d18:	2300      	movs	r3, #0
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e01d      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	e01a      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d24:	2304      	movs	r3, #4
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e017      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d30:	2310      	movs	r3, #16
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e011      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a67      	ldr	r2, [pc, #412]	; (8003ed8 <UART_SetConfig+0x260>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d102      	bne.n	8003d46 <UART_SetConfig+0xce>
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a64      	ldr	r2, [pc, #400]	; (8003edc <UART_SetConfig+0x264>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d102      	bne.n	8003d56 <UART_SetConfig+0xde>
 8003d50:	2300      	movs	r3, #0
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e001      	b.n	8003d5a <UART_SetConfig+0xe2>
 8003d56:	2310      	movs	r3, #16
 8003d58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	d15a      	bne.n	8003e1a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d827      	bhi.n	8003dba <UART_SetConfig+0x142>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <UART_SetConfig+0xf8>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe fe68 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003d98:	61b8      	str	r0, [r7, #24]
        break;
 8003d9a:	e013      	b.n	8003dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fe86 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003da0:	61b8      	str	r0, [r7, #24]
        break;
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <UART_SetConfig+0x268>)
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e00c      	b.n	8003dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe fde7 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8003dae:	61b8      	str	r0, [r7, #24]
        break;
 8003db0:	e008      	b.n	8003dc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e004      	b.n	8003dc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d074      	beq.n	8003eb4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d916      	bls.n	8003e14 <UART_SetConfig+0x19c>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d212      	bcs.n	8003e14 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	89fa      	ldrh	r2, [r7, #14]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e04f      	b.n	8003eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77bb      	strb	r3, [r7, #30]
 8003e18:	e04c      	b.n	8003eb4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d828      	bhi.n	8003e72 <UART_SetConfig+0x1fa>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0x1b0>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fe0c 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8003e50:	61b8      	str	r0, [r7, #24]
        break;
 8003e52:	e013      	b.n	8003e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7fe fe2a 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <UART_SetConfig+0x268>)
 8003e5e:	61bb      	str	r3, [r7, #24]
        break;
 8003e60:	e00c      	b.n	8003e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7fe fd8b 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8003e66:	61b8      	str	r0, [r7, #24]
        break;
 8003e68:	e008      	b.n	8003e7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e004      	b.n	8003e7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77bb      	strb	r3, [r7, #30]
        break;
 8003e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085a      	lsrs	r2, r3, #1
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b0f      	cmp	r3, #15
 8003e9a:	d909      	bls.n	8003eb0 <UART_SetConfig+0x238>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d205      	bcs.n	8003eb0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	e001      	b.n	8003eb4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	efff69f3 	.word	0xefff69f3
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40004400 	.word	0x40004400
 8003edc:	40004800 	.word	0x40004800
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01a      	beq.n	8003ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe2:	d10a      	bne.n	8003ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b098      	sub	sp, #96	; 0x60
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004038:	f7fc ff5a 	bl	8000ef0 <HAL_GetTick>
 800403c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d12e      	bne.n	80040aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f88c 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d021      	beq.n	80040aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800408a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e062      	b.n	8004170 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d149      	bne.n	800414c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f856 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03c      	beq.n	800414c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	623b      	str	r3, [r7, #32]
   return(result);
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e6      	bne.n	80040d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	60fb      	str	r3, [r7, #12]
   return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004124:	61fa      	str	r2, [r7, #28]
 8004126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	617b      	str	r3, [r7, #20]
   return(result);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e011      	b.n	8004170 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3758      	adds	r7, #88	; 0x58
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	e049      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d045      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fc fead 	bl	8000ef0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e048      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d031      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d110      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f838 	bl	8004246 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2208      	movs	r2, #8
 80041da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e029      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f8:	d111      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f81e 	bl	8004246 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e00f      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	429a      	cmp	r2, r3
 800423a:	d0a6      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004246:	b480      	push	{r7}
 8004248:	b095      	sub	sp, #84	; 0x54
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	643b      	str	r3, [r7, #64]	; 0x40
 800426e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e6      	bne.n	800424e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d118      	bne.n	80042ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6979      	ldr	r1, [r7, #20]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	613b      	str	r3, [r7, #16]
   return(result);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e6      	bne.n	80042bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004302:	bf00      	nop
 8004304:	3754      	adds	r7, #84	; 0x54
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff fc8d 	bl	8003c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b08f      	sub	sp, #60	; 0x3c
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004346:	2b21      	cmp	r3, #33	; 0x21
 8004348:	d14d      	bne.n	80043e6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d132      	bne.n	80043bc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	61fb      	str	r3, [r7, #28]
   return(result);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800437a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	60bb      	str	r3, [r7, #8]
   return(result);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6979      	ldr	r1, [r7, #20]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	613b      	str	r3, [r7, #16]
   return(result);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e6      	bne.n	8004388 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043ba:	e014      	b.n	80043e6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b292      	uxth	r2, r2
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043e6:	bf00      	nop
 80043e8:	373c      	adds	r7, #60	; 0x3c
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b091      	sub	sp, #68	; 0x44
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fe:	2b21      	cmp	r3, #33	; 0x21
 8004400:	d151      	bne.n	80044a6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d132      	bne.n	8004474 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	623b      	str	r3, [r7, #32]
   return(result);
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
 800442e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	60fb      	str	r3, [r7, #12]
   return(result);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	69b9      	ldr	r1, [r7, #24]
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	617b      	str	r3, [r7, #20]
   return(result);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e6      	bne.n	8004440 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004472:	e018      	b.n	80044a6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004478:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800447a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004486:	b292      	uxth	r2, r2
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044a6:	bf00      	nop
 80044a8:	3744      	adds	r7, #68	; 0x44
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b088      	sub	sp, #32
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fb9d 	bl	8003c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <__errno>:
 800451c:	4b01      	ldr	r3, [pc, #4]	; (8004524 <__errno+0x8>)
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000014 	.word	0x20000014

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4d0d      	ldr	r5, [pc, #52]	; (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2600      	movs	r6, #0
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4d0b      	ldr	r5, [pc, #44]	; (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	; (800456c <__libc_init_array+0x44>)
 800453c:	f001 fa34 	bl	80059a8 <_init>
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2600      	movs	r6, #0
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	08005cb4 	.word	0x08005cb4
 8004564:	08005cb4 	.word	0x08005cb4
 8004568:	08005cb4 	.word	0x08005cb4
 800456c:	08005cb8 	.word	0x08005cb8

08004570 <memcpy>:
 8004570:	440a      	add	r2, r1
 8004572:	4291      	cmp	r1, r2
 8004574:	f100 33ff 	add.w	r3, r0, #4294967295
 8004578:	d100      	bne.n	800457c <memcpy+0xc>
 800457a:	4770      	bx	lr
 800457c:	b510      	push	{r4, lr}
 800457e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004586:	4291      	cmp	r1, r2
 8004588:	d1f9      	bne.n	800457e <memcpy+0xe>
 800458a:	bd10      	pop	{r4, pc}

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <rand>:
 800459c:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <rand+0x5c>)
 800459e:	b510      	push	{r4, lr}
 80045a0:	681c      	ldr	r4, [r3, #0]
 80045a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045a4:	b9b3      	cbnz	r3, 80045d4 <rand+0x38>
 80045a6:	2018      	movs	r0, #24
 80045a8:	f000 f886 	bl	80046b8 <malloc>
 80045ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80045ae:	b928      	cbnz	r0, 80045bc <rand+0x20>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <rand+0x60>)
 80045b4:	4812      	ldr	r0, [pc, #72]	; (8004600 <rand+0x64>)
 80045b6:	214e      	movs	r1, #78	; 0x4e
 80045b8:	f000 f84e 	bl	8004658 <__assert_func>
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <rand+0x68>)
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <rand+0x6c>)
 80045c0:	e9c0 2300 	strd	r2, r3, [r0]
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <rand+0x70>)
 80045c6:	6083      	str	r3, [r0, #8]
 80045c8:	230b      	movs	r3, #11
 80045ca:	8183      	strh	r3, [r0, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	2300      	movs	r3, #0
 80045d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80045d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <rand+0x74>)
 80045d8:	6920      	ldr	r0, [r4, #16]
 80045da:	6963      	ldr	r3, [r4, #20]
 80045dc:	490d      	ldr	r1, [pc, #52]	; (8004614 <rand+0x78>)
 80045de:	4342      	muls	r2, r0
 80045e0:	fb01 2203 	mla	r2, r1, r3, r2
 80045e4:	fba0 0101 	umull	r0, r1, r0, r1
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	eb42 0001 	adc.w	r0, r2, r1
 80045ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80045f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	20000014 	.word	0x20000014
 80045fc:	08005b70 	.word	0x08005b70
 8004600:	08005b87 	.word	0x08005b87
 8004604:	abcd330e 	.word	0xabcd330e
 8004608:	e66d1234 	.word	0xe66d1234
 800460c:	0005deec 	.word	0x0005deec
 8004610:	5851f42d 	.word	0x5851f42d
 8004614:	4c957f2d 	.word	0x4c957f2d

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	b500      	push	{lr}
 800461c:	b09c      	sub	sp, #112	; 0x70
 800461e:	ab1d      	add	r3, sp, #116	; 0x74
 8004620:	9002      	str	r0, [sp, #8]
 8004622:	9006      	str	r0, [sp, #24]
 8004624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004628:	4809      	ldr	r0, [pc, #36]	; (8004650 <siprintf+0x38>)
 800462a:	9107      	str	r1, [sp, #28]
 800462c:	9104      	str	r1, [sp, #16]
 800462e:	4909      	ldr	r1, [pc, #36]	; (8004654 <siprintf+0x3c>)
 8004630:	f853 2b04 	ldr.w	r2, [r3], #4
 8004634:	9105      	str	r1, [sp, #20]
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	a902      	add	r1, sp, #8
 800463c:	f000 f980 	bl	8004940 <_svfiprintf_r>
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	b01c      	add	sp, #112	; 0x70
 8004648:	f85d eb04 	ldr.w	lr, [sp], #4
 800464c:	b003      	add	sp, #12
 800464e:	4770      	bx	lr
 8004650:	20000014 	.word	0x20000014
 8004654:	ffff0208 	.word	0xffff0208

08004658 <__assert_func>:
 8004658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800465a:	4614      	mov	r4, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <__assert_func+0x2c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4605      	mov	r5, r0
 8004664:	68d8      	ldr	r0, [r3, #12]
 8004666:	b14c      	cbz	r4, 800467c <__assert_func+0x24>
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <__assert_func+0x30>)
 800466a:	9100      	str	r1, [sp, #0]
 800466c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004670:	4906      	ldr	r1, [pc, #24]	; (800468c <__assert_func+0x34>)
 8004672:	462b      	mov	r3, r5
 8004674:	f000 f80e 	bl	8004694 <fiprintf>
 8004678:	f000 fe20 	bl	80052bc <abort>
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <__assert_func+0x38>)
 800467e:	461c      	mov	r4, r3
 8004680:	e7f3      	b.n	800466a <__assert_func+0x12>
 8004682:	bf00      	nop
 8004684:	20000014 	.word	0x20000014
 8004688:	08005be2 	.word	0x08005be2
 800468c:	08005bef 	.word	0x08005bef
 8004690:	08005c1d 	.word	0x08005c1d

08004694 <fiprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	b503      	push	{r0, r1, lr}
 8004698:	4601      	mov	r1, r0
 800469a:	ab03      	add	r3, sp, #12
 800469c:	4805      	ldr	r0, [pc, #20]	; (80046b4 <fiprintf+0x20>)
 800469e:	f853 2b04 	ldr.w	r2, [r3], #4
 80046a2:	6800      	ldr	r0, [r0, #0]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	f000 fa75 	bl	8004b94 <_vfiprintf_r>
 80046aa:	b002      	add	sp, #8
 80046ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80046b0:	b003      	add	sp, #12
 80046b2:	4770      	bx	lr
 80046b4:	20000014 	.word	0x20000014

080046b8 <malloc>:
 80046b8:	4b02      	ldr	r3, [pc, #8]	; (80046c4 <malloc+0xc>)
 80046ba:	4601      	mov	r1, r0
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f000 b86f 	b.w	80047a0 <_malloc_r>
 80046c2:	bf00      	nop
 80046c4:	20000014 	.word	0x20000014

080046c8 <_free_r>:
 80046c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	d044      	beq.n	8004758 <_free_r+0x90>
 80046ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d2:	9001      	str	r0, [sp, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f1a1 0404 	sub.w	r4, r1, #4
 80046da:	bfb8      	it	lt
 80046dc:	18e4      	addlt	r4, r4, r3
 80046de:	f001 f82f 	bl	8005740 <__malloc_lock>
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <_free_r+0x94>)
 80046e4:	9801      	ldr	r0, [sp, #4]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	b933      	cbnz	r3, 80046f8 <_free_r+0x30>
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	b003      	add	sp, #12
 80046f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f4:	f001 b82a 	b.w	800574c <__malloc_unlock>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d908      	bls.n	800470e <_free_r+0x46>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	1961      	adds	r1, r4, r5
 8004700:	428b      	cmp	r3, r1
 8004702:	bf01      	itttt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	1949      	addeq	r1, r1, r5
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	e7ed      	b.n	80046ea <_free_r+0x22>
 800470e:	461a      	mov	r2, r3
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b10b      	cbz	r3, 8004718 <_free_r+0x50>
 8004714:	42a3      	cmp	r3, r4
 8004716:	d9fa      	bls.n	800470e <_free_r+0x46>
 8004718:	6811      	ldr	r1, [r2, #0]
 800471a:	1855      	adds	r5, r2, r1
 800471c:	42a5      	cmp	r5, r4
 800471e:	d10b      	bne.n	8004738 <_free_r+0x70>
 8004720:	6824      	ldr	r4, [r4, #0]
 8004722:	4421      	add	r1, r4
 8004724:	1854      	adds	r4, r2, r1
 8004726:	42a3      	cmp	r3, r4
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	d1e0      	bne.n	80046ee <_free_r+0x26>
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	4421      	add	r1, r4
 8004734:	6011      	str	r1, [r2, #0]
 8004736:	e7da      	b.n	80046ee <_free_r+0x26>
 8004738:	d902      	bls.n	8004740 <_free_r+0x78>
 800473a:	230c      	movs	r3, #12
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	e7d6      	b.n	80046ee <_free_r+0x26>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	1961      	adds	r1, r4, r5
 8004744:	428b      	cmp	r3, r1
 8004746:	bf04      	itt	eq
 8004748:	6819      	ldreq	r1, [r3, #0]
 800474a:	685b      	ldreq	r3, [r3, #4]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	bf04      	itt	eq
 8004750:	1949      	addeq	r1, r1, r5
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6054      	str	r4, [r2, #4]
 8004756:	e7ca      	b.n	80046ee <_free_r+0x26>
 8004758:	b003      	add	sp, #12
 800475a:	bd30      	pop	{r4, r5, pc}
 800475c:	20000224 	.word	0x20000224

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0e      	ldr	r6, [pc, #56]	; (800479c <sbrk_aligned+0x3c>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fcd6 	bl	800511c <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fcd1 	bl	800511c <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d00a      	beq.n	8004794 <sbrk_aligned+0x34>
 800477e:	1cc4      	adds	r4, r0, #3
 8004780:	f024 0403 	bic.w	r4, r4, #3
 8004784:	42a0      	cmp	r0, r4
 8004786:	d007      	beq.n	8004798 <sbrk_aligned+0x38>
 8004788:	1a21      	subs	r1, r4, r0
 800478a:	4628      	mov	r0, r5
 800478c:	f000 fcc6 	bl	800511c <_sbrk_r>
 8004790:	3001      	adds	r0, #1
 8004792:	d101      	bne.n	8004798 <sbrk_aligned+0x38>
 8004794:	f04f 34ff 	mov.w	r4, #4294967295
 8004798:	4620      	mov	r0, r4
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	20000228 	.word	0x20000228

080047a0 <_malloc_r>:
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	1ccd      	adds	r5, r1, #3
 80047a6:	f025 0503 	bic.w	r5, r5, #3
 80047aa:	3508      	adds	r5, #8
 80047ac:	2d0c      	cmp	r5, #12
 80047ae:	bf38      	it	cc
 80047b0:	250c      	movcc	r5, #12
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	4607      	mov	r7, r0
 80047b6:	db01      	blt.n	80047bc <_malloc_r+0x1c>
 80047b8:	42a9      	cmp	r1, r5
 80047ba:	d905      	bls.n	80047c8 <_malloc_r+0x28>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	2600      	movs	r6, #0
 80047c2:	4630      	mov	r0, r6
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	4e2e      	ldr	r6, [pc, #184]	; (8004884 <_malloc_r+0xe4>)
 80047ca:	f000 ffb9 	bl	8005740 <__malloc_lock>
 80047ce:	6833      	ldr	r3, [r6, #0]
 80047d0:	461c      	mov	r4, r3
 80047d2:	bb34      	cbnz	r4, 8004822 <_malloc_r+0x82>
 80047d4:	4629      	mov	r1, r5
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ffc2 	bl	8004760 <sbrk_aligned>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	4604      	mov	r4, r0
 80047e0:	d14d      	bne.n	800487e <_malloc_r+0xde>
 80047e2:	6834      	ldr	r4, [r6, #0]
 80047e4:	4626      	mov	r6, r4
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d140      	bne.n	800486c <_malloc_r+0xcc>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4631      	mov	r1, r6
 80047ee:	4638      	mov	r0, r7
 80047f0:	eb04 0803 	add.w	r8, r4, r3
 80047f4:	f000 fc92 	bl	800511c <_sbrk_r>
 80047f8:	4580      	cmp	r8, r0
 80047fa:	d13a      	bne.n	8004872 <_malloc_r+0xd2>
 80047fc:	6821      	ldr	r1, [r4, #0]
 80047fe:	3503      	adds	r5, #3
 8004800:	1a6d      	subs	r5, r5, r1
 8004802:	f025 0503 	bic.w	r5, r5, #3
 8004806:	3508      	adds	r5, #8
 8004808:	2d0c      	cmp	r5, #12
 800480a:	bf38      	it	cc
 800480c:	250c      	movcc	r5, #12
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ffa5 	bl	8004760 <sbrk_aligned>
 8004816:	3001      	adds	r0, #1
 8004818:	d02b      	beq.n	8004872 <_malloc_r+0xd2>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	442b      	add	r3, r5
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	e00e      	b.n	8004840 <_malloc_r+0xa0>
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	1b52      	subs	r2, r2, r5
 8004826:	d41e      	bmi.n	8004866 <_malloc_r+0xc6>
 8004828:	2a0b      	cmp	r2, #11
 800482a:	d916      	bls.n	800485a <_malloc_r+0xba>
 800482c:	1961      	adds	r1, r4, r5
 800482e:	42a3      	cmp	r3, r4
 8004830:	6025      	str	r5, [r4, #0]
 8004832:	bf18      	it	ne
 8004834:	6059      	strne	r1, [r3, #4]
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	bf08      	it	eq
 800483a:	6031      	streq	r1, [r6, #0]
 800483c:	5162      	str	r2, [r4, r5]
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	4638      	mov	r0, r7
 8004842:	f104 060b 	add.w	r6, r4, #11
 8004846:	f000 ff81 	bl	800574c <__malloc_unlock>
 800484a:	f026 0607 	bic.w	r6, r6, #7
 800484e:	1d23      	adds	r3, r4, #4
 8004850:	1af2      	subs	r2, r6, r3
 8004852:	d0b6      	beq.n	80047c2 <_malloc_r+0x22>
 8004854:	1b9b      	subs	r3, r3, r6
 8004856:	50a3      	str	r3, [r4, r2]
 8004858:	e7b3      	b.n	80047c2 <_malloc_r+0x22>
 800485a:	6862      	ldr	r2, [r4, #4]
 800485c:	42a3      	cmp	r3, r4
 800485e:	bf0c      	ite	eq
 8004860:	6032      	streq	r2, [r6, #0]
 8004862:	605a      	strne	r2, [r3, #4]
 8004864:	e7ec      	b.n	8004840 <_malloc_r+0xa0>
 8004866:	4623      	mov	r3, r4
 8004868:	6864      	ldr	r4, [r4, #4]
 800486a:	e7b2      	b.n	80047d2 <_malloc_r+0x32>
 800486c:	4634      	mov	r4, r6
 800486e:	6876      	ldr	r6, [r6, #4]
 8004870:	e7b9      	b.n	80047e6 <_malloc_r+0x46>
 8004872:	230c      	movs	r3, #12
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4638      	mov	r0, r7
 8004878:	f000 ff68 	bl	800574c <__malloc_unlock>
 800487c:	e7a1      	b.n	80047c2 <_malloc_r+0x22>
 800487e:	6025      	str	r5, [r4, #0]
 8004880:	e7de      	b.n	8004840 <_malloc_r+0xa0>
 8004882:	bf00      	nop
 8004884:	20000224 	.word	0x20000224

08004888 <__ssputs_r>:
 8004888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	688e      	ldr	r6, [r1, #8]
 800488e:	429e      	cmp	r6, r3
 8004890:	4682      	mov	sl, r0
 8004892:	460c      	mov	r4, r1
 8004894:	4690      	mov	r8, r2
 8004896:	461f      	mov	r7, r3
 8004898:	d838      	bhi.n	800490c <__ssputs_r+0x84>
 800489a:	898a      	ldrh	r2, [r1, #12]
 800489c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048a0:	d032      	beq.n	8004908 <__ssputs_r+0x80>
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	6909      	ldr	r1, [r1, #16]
 80048a6:	eba5 0901 	sub.w	r9, r5, r1
 80048aa:	6965      	ldr	r5, [r4, #20]
 80048ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048b4:	3301      	adds	r3, #1
 80048b6:	444b      	add	r3, r9
 80048b8:	106d      	asrs	r5, r5, #1
 80048ba:	429d      	cmp	r5, r3
 80048bc:	bf38      	it	cc
 80048be:	461d      	movcc	r5, r3
 80048c0:	0553      	lsls	r3, r2, #21
 80048c2:	d531      	bpl.n	8004928 <__ssputs_r+0xa0>
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7ff ff6b 	bl	80047a0 <_malloc_r>
 80048ca:	4606      	mov	r6, r0
 80048cc:	b950      	cbnz	r0, 80048e4 <__ssputs_r+0x5c>
 80048ce:	230c      	movs	r3, #12
 80048d0:	f8ca 3000 	str.w	r3, [sl]
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e4:	6921      	ldr	r1, [r4, #16]
 80048e6:	464a      	mov	r2, r9
 80048e8:	f7ff fe42 	bl	8004570 <memcpy>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	6126      	str	r6, [r4, #16]
 80048fa:	6165      	str	r5, [r4, #20]
 80048fc:	444e      	add	r6, r9
 80048fe:	eba5 0509 	sub.w	r5, r5, r9
 8004902:	6026      	str	r6, [r4, #0]
 8004904:	60a5      	str	r5, [r4, #8]
 8004906:	463e      	mov	r6, r7
 8004908:	42be      	cmp	r6, r7
 800490a:	d900      	bls.n	800490e <__ssputs_r+0x86>
 800490c:	463e      	mov	r6, r7
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	4632      	mov	r2, r6
 8004912:	4641      	mov	r1, r8
 8004914:	f000 fefa 	bl	800570c <memmove>
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	1b9b      	subs	r3, r3, r6
 800491c:	60a3      	str	r3, [r4, #8]
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	4433      	add	r3, r6
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	2000      	movs	r0, #0
 8004926:	e7db      	b.n	80048e0 <__ssputs_r+0x58>
 8004928:	462a      	mov	r2, r5
 800492a:	f000 ff15 	bl	8005758 <_realloc_r>
 800492e:	4606      	mov	r6, r0
 8004930:	2800      	cmp	r0, #0
 8004932:	d1e1      	bne.n	80048f8 <__ssputs_r+0x70>
 8004934:	6921      	ldr	r1, [r4, #16]
 8004936:	4650      	mov	r0, sl
 8004938:	f7ff fec6 	bl	80046c8 <_free_r>
 800493c:	e7c7      	b.n	80048ce <__ssputs_r+0x46>
	...

08004940 <_svfiprintf_r>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4698      	mov	r8, r3
 8004946:	898b      	ldrh	r3, [r1, #12]
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	b09d      	sub	sp, #116	; 0x74
 800494c:	4607      	mov	r7, r0
 800494e:	460d      	mov	r5, r1
 8004950:	4614      	mov	r4, r2
 8004952:	d50e      	bpl.n	8004972 <_svfiprintf_r+0x32>
 8004954:	690b      	ldr	r3, [r1, #16]
 8004956:	b963      	cbnz	r3, 8004972 <_svfiprintf_r+0x32>
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	f7ff ff21 	bl	80047a0 <_malloc_r>
 800495e:	6028      	str	r0, [r5, #0]
 8004960:	6128      	str	r0, [r5, #16]
 8004962:	b920      	cbnz	r0, 800496e <_svfiprintf_r+0x2e>
 8004964:	230c      	movs	r3, #12
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e0d1      	b.n	8004b12 <_svfiprintf_r+0x1d2>
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	616b      	str	r3, [r5, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	2320      	movs	r3, #32
 8004978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800497c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004980:	2330      	movs	r3, #48	; 0x30
 8004982:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b2c <_svfiprintf_r+0x1ec>
 8004986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800498a:	f04f 0901 	mov.w	r9, #1
 800498e:	4623      	mov	r3, r4
 8004990:	469a      	mov	sl, r3
 8004992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004996:	b10a      	cbz	r2, 800499c <_svfiprintf_r+0x5c>
 8004998:	2a25      	cmp	r2, #37	; 0x25
 800499a:	d1f9      	bne.n	8004990 <_svfiprintf_r+0x50>
 800499c:	ebba 0b04 	subs.w	fp, sl, r4
 80049a0:	d00b      	beq.n	80049ba <_svfiprintf_r+0x7a>
 80049a2:	465b      	mov	r3, fp
 80049a4:	4622      	mov	r2, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	4638      	mov	r0, r7
 80049aa:	f7ff ff6d 	bl	8004888 <__ssputs_r>
 80049ae:	3001      	adds	r0, #1
 80049b0:	f000 80aa 	beq.w	8004b08 <_svfiprintf_r+0x1c8>
 80049b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b6:	445a      	add	r2, fp
 80049b8:	9209      	str	r2, [sp, #36]	; 0x24
 80049ba:	f89a 3000 	ldrb.w	r3, [sl]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80a2 	beq.w	8004b08 <_svfiprintf_r+0x1c8>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ce:	f10a 0a01 	add.w	sl, sl, #1
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	9307      	str	r3, [sp, #28]
 80049d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049da:	931a      	str	r3, [sp, #104]	; 0x68
 80049dc:	4654      	mov	r4, sl
 80049de:	2205      	movs	r2, #5
 80049e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e4:	4851      	ldr	r0, [pc, #324]	; (8004b2c <_svfiprintf_r+0x1ec>)
 80049e6:	f7fb fc0b 	bl	8000200 <memchr>
 80049ea:	9a04      	ldr	r2, [sp, #16]
 80049ec:	b9d8      	cbnz	r0, 8004a26 <_svfiprintf_r+0xe6>
 80049ee:	06d0      	lsls	r0, r2, #27
 80049f0:	bf44      	itt	mi
 80049f2:	2320      	movmi	r3, #32
 80049f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f8:	0711      	lsls	r1, r2, #28
 80049fa:	bf44      	itt	mi
 80049fc:	232b      	movmi	r3, #43	; 0x2b
 80049fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a02:	f89a 3000 	ldrb.w	r3, [sl]
 8004a06:	2b2a      	cmp	r3, #42	; 0x2a
 8004a08:	d015      	beq.n	8004a36 <_svfiprintf_r+0xf6>
 8004a0a:	9a07      	ldr	r2, [sp, #28]
 8004a0c:	4654      	mov	r4, sl
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f04f 0c0a 	mov.w	ip, #10
 8004a14:	4621      	mov	r1, r4
 8004a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a1a:	3b30      	subs	r3, #48	; 0x30
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d94e      	bls.n	8004abe <_svfiprintf_r+0x17e>
 8004a20:	b1b0      	cbz	r0, 8004a50 <_svfiprintf_r+0x110>
 8004a22:	9207      	str	r2, [sp, #28]
 8004a24:	e014      	b.n	8004a50 <_svfiprintf_r+0x110>
 8004a26:	eba0 0308 	sub.w	r3, r0, r8
 8004a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	46a2      	mov	sl, r4
 8004a34:	e7d2      	b.n	80049dc <_svfiprintf_r+0x9c>
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	9103      	str	r1, [sp, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfbb      	ittet	lt
 8004a42:	425b      	neglt	r3, r3
 8004a44:	f042 0202 	orrlt.w	r2, r2, #2
 8004a48:	9307      	strge	r3, [sp, #28]
 8004a4a:	9307      	strlt	r3, [sp, #28]
 8004a4c:	bfb8      	it	lt
 8004a4e:	9204      	strlt	r2, [sp, #16]
 8004a50:	7823      	ldrb	r3, [r4, #0]
 8004a52:	2b2e      	cmp	r3, #46	; 0x2e
 8004a54:	d10c      	bne.n	8004a70 <_svfiprintf_r+0x130>
 8004a56:	7863      	ldrb	r3, [r4, #1]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d135      	bne.n	8004ac8 <_svfiprintf_r+0x188>
 8004a5c:	9b03      	ldr	r3, [sp, #12]
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	9203      	str	r2, [sp, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bfb8      	it	lt
 8004a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6c:	3402      	adds	r4, #2
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b3c <_svfiprintf_r+0x1fc>
 8004a74:	7821      	ldrb	r1, [r4, #0]
 8004a76:	2203      	movs	r2, #3
 8004a78:	4650      	mov	r0, sl
 8004a7a:	f7fb fbc1 	bl	8000200 <memchr>
 8004a7e:	b140      	cbz	r0, 8004a92 <_svfiprintf_r+0x152>
 8004a80:	2340      	movs	r3, #64	; 0x40
 8004a82:	eba0 000a 	sub.w	r0, r0, sl
 8004a86:	fa03 f000 	lsl.w	r0, r3, r0
 8004a8a:	9b04      	ldr	r3, [sp, #16]
 8004a8c:	4303      	orrs	r3, r0
 8004a8e:	3401      	adds	r4, #1
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a96:	4826      	ldr	r0, [pc, #152]	; (8004b30 <_svfiprintf_r+0x1f0>)
 8004a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a9c:	2206      	movs	r2, #6
 8004a9e:	f7fb fbaf 	bl	8000200 <memchr>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d038      	beq.n	8004b18 <_svfiprintf_r+0x1d8>
 8004aa6:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <_svfiprintf_r+0x1f4>)
 8004aa8:	bb1b      	cbnz	r3, 8004af2 <_svfiprintf_r+0x1b2>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	3307      	adds	r3, #7
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	9303      	str	r3, [sp, #12]
 8004ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab8:	4433      	add	r3, r6
 8004aba:	9309      	str	r3, [sp, #36]	; 0x24
 8004abc:	e767      	b.n	800498e <_svfiprintf_r+0x4e>
 8004abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	e7a5      	b.n	8004a14 <_svfiprintf_r+0xd4>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	3401      	adds	r4, #1
 8004acc:	9305      	str	r3, [sp, #20]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f04f 0c0a 	mov.w	ip, #10
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ada:	3a30      	subs	r2, #48	; 0x30
 8004adc:	2a09      	cmp	r2, #9
 8004ade:	d903      	bls.n	8004ae8 <_svfiprintf_r+0x1a8>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0c5      	beq.n	8004a70 <_svfiprintf_r+0x130>
 8004ae4:	9105      	str	r1, [sp, #20]
 8004ae6:	e7c3      	b.n	8004a70 <_svfiprintf_r+0x130>
 8004ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aec:	4604      	mov	r4, r0
 8004aee:	2301      	movs	r3, #1
 8004af0:	e7f0      	b.n	8004ad4 <_svfiprintf_r+0x194>
 8004af2:	ab03      	add	r3, sp, #12
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	462a      	mov	r2, r5
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	4638      	mov	r0, r7
 8004afe:	f3af 8000 	nop.w
 8004b02:	1c42      	adds	r2, r0, #1
 8004b04:	4606      	mov	r6, r0
 8004b06:	d1d6      	bne.n	8004ab6 <_svfiprintf_r+0x176>
 8004b08:	89ab      	ldrh	r3, [r5, #12]
 8004b0a:	065b      	lsls	r3, r3, #25
 8004b0c:	f53f af2c 	bmi.w	8004968 <_svfiprintf_r+0x28>
 8004b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b12:	b01d      	add	sp, #116	; 0x74
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b18:	ab03      	add	r3, sp, #12
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <_svfiprintf_r+0x1f8>)
 8004b20:	a904      	add	r1, sp, #16
 8004b22:	4638      	mov	r0, r7
 8004b24:	f000 f9d4 	bl	8004ed0 <_printf_i>
 8004b28:	e7eb      	b.n	8004b02 <_svfiprintf_r+0x1c2>
 8004b2a:	bf00      	nop
 8004b2c:	08005c1e 	.word	0x08005c1e
 8004b30:	08005c28 	.word	0x08005c28
 8004b34:	00000000 	.word	0x00000000
 8004b38:	08004889 	.word	0x08004889
 8004b3c:	08005c24 	.word	0x08005c24

08004b40 <__sfputc_r>:
 8004b40:	6893      	ldr	r3, [r2, #8]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	b410      	push	{r4}
 8004b48:	6093      	str	r3, [r2, #8]
 8004b4a:	da08      	bge.n	8004b5e <__sfputc_r+0x1e>
 8004b4c:	6994      	ldr	r4, [r2, #24]
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	db01      	blt.n	8004b56 <__sfputc_r+0x16>
 8004b52:	290a      	cmp	r1, #10
 8004b54:	d103      	bne.n	8004b5e <__sfputc_r+0x1e>
 8004b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5a:	f000 baef 	b.w	800513c <__swbuf_r>
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	1c58      	adds	r0, r3, #1
 8004b62:	6010      	str	r0, [r2, #0]
 8004b64:	7019      	strb	r1, [r3, #0]
 8004b66:	4608      	mov	r0, r1
 8004b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <__sfputs_r>:
 8004b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	18d5      	adds	r5, r2, r3
 8004b78:	42ac      	cmp	r4, r5
 8004b7a:	d101      	bne.n	8004b80 <__sfputs_r+0x12>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e007      	b.n	8004b90 <__sfputs_r+0x22>
 8004b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b84:	463a      	mov	r2, r7
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff ffda 	bl	8004b40 <__sfputc_r>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d1f3      	bne.n	8004b78 <__sfputs_r+0xa>
 8004b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b94 <_vfiprintf_r>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	460d      	mov	r5, r1
 8004b9a:	b09d      	sub	sp, #116	; 0x74
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	4698      	mov	r8, r3
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	b118      	cbz	r0, 8004bac <_vfiprintf_r+0x18>
 8004ba4:	6983      	ldr	r3, [r0, #24]
 8004ba6:	b90b      	cbnz	r3, 8004bac <_vfiprintf_r+0x18>
 8004ba8:	f000 fcaa 	bl	8005500 <__sinit>
 8004bac:	4b89      	ldr	r3, [pc, #548]	; (8004dd4 <_vfiprintf_r+0x240>)
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	d11b      	bne.n	8004bea <_vfiprintf_r+0x56>
 8004bb2:	6875      	ldr	r5, [r6, #4]
 8004bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bb6:	07d9      	lsls	r1, r3, #31
 8004bb8:	d405      	bmi.n	8004bc6 <_vfiprintf_r+0x32>
 8004bba:	89ab      	ldrh	r3, [r5, #12]
 8004bbc:	059a      	lsls	r2, r3, #22
 8004bbe:	d402      	bmi.n	8004bc6 <_vfiprintf_r+0x32>
 8004bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bc2:	f000 fd3b 	bl	800563c <__retarget_lock_acquire_recursive>
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	d501      	bpl.n	8004bd0 <_vfiprintf_r+0x3c>
 8004bcc:	692b      	ldr	r3, [r5, #16]
 8004bce:	b9eb      	cbnz	r3, 8004c0c <_vfiprintf_r+0x78>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 fb04 	bl	80051e0 <__swsetup_r>
 8004bd8:	b1c0      	cbz	r0, 8004c0c <_vfiprintf_r+0x78>
 8004bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bdc:	07dc      	lsls	r4, r3, #31
 8004bde:	d50e      	bpl.n	8004bfe <_vfiprintf_r+0x6a>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	b01d      	add	sp, #116	; 0x74
 8004be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bea:	4b7b      	ldr	r3, [pc, #492]	; (8004dd8 <_vfiprintf_r+0x244>)
 8004bec:	429d      	cmp	r5, r3
 8004bee:	d101      	bne.n	8004bf4 <_vfiprintf_r+0x60>
 8004bf0:	68b5      	ldr	r5, [r6, #8]
 8004bf2:	e7df      	b.n	8004bb4 <_vfiprintf_r+0x20>
 8004bf4:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <_vfiprintf_r+0x248>)
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	bf08      	it	eq
 8004bfa:	68f5      	ldreq	r5, [r6, #12]
 8004bfc:	e7da      	b.n	8004bb4 <_vfiprintf_r+0x20>
 8004bfe:	89ab      	ldrh	r3, [r5, #12]
 8004c00:	0598      	lsls	r0, r3, #22
 8004c02:	d4ed      	bmi.n	8004be0 <_vfiprintf_r+0x4c>
 8004c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c06:	f000 fd1a 	bl	800563e <__retarget_lock_release_recursive>
 8004c0a:	e7e9      	b.n	8004be0 <_vfiprintf_r+0x4c>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c10:	2320      	movs	r3, #32
 8004c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1a:	2330      	movs	r3, #48	; 0x30
 8004c1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004de0 <_vfiprintf_r+0x24c>
 8004c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c24:	f04f 0901 	mov.w	r9, #1
 8004c28:	4623      	mov	r3, r4
 8004c2a:	469a      	mov	sl, r3
 8004c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c30:	b10a      	cbz	r2, 8004c36 <_vfiprintf_r+0xa2>
 8004c32:	2a25      	cmp	r2, #37	; 0x25
 8004c34:	d1f9      	bne.n	8004c2a <_vfiprintf_r+0x96>
 8004c36:	ebba 0b04 	subs.w	fp, sl, r4
 8004c3a:	d00b      	beq.n	8004c54 <_vfiprintf_r+0xc0>
 8004c3c:	465b      	mov	r3, fp
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7ff ff93 	bl	8004b6e <__sfputs_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f000 80aa 	beq.w	8004da2 <_vfiprintf_r+0x20e>
 8004c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c50:	445a      	add	r2, fp
 8004c52:	9209      	str	r2, [sp, #36]	; 0x24
 8004c54:	f89a 3000 	ldrb.w	r3, [sl]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a2 	beq.w	8004da2 <_vfiprintf_r+0x20e>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c68:	f10a 0a01 	add.w	sl, sl, #1
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	9307      	str	r3, [sp, #28]
 8004c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c74:	931a      	str	r3, [sp, #104]	; 0x68
 8004c76:	4654      	mov	r4, sl
 8004c78:	2205      	movs	r2, #5
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	4858      	ldr	r0, [pc, #352]	; (8004de0 <_vfiprintf_r+0x24c>)
 8004c80:	f7fb fabe 	bl	8000200 <memchr>
 8004c84:	9a04      	ldr	r2, [sp, #16]
 8004c86:	b9d8      	cbnz	r0, 8004cc0 <_vfiprintf_r+0x12c>
 8004c88:	06d1      	lsls	r1, r2, #27
 8004c8a:	bf44      	itt	mi
 8004c8c:	2320      	movmi	r3, #32
 8004c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c92:	0713      	lsls	r3, r2, #28
 8004c94:	bf44      	itt	mi
 8004c96:	232b      	movmi	r3, #43	; 0x2b
 8004c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca2:	d015      	beq.n	8004cd0 <_vfiprintf_r+0x13c>
 8004ca4:	9a07      	ldr	r2, [sp, #28]
 8004ca6:	4654      	mov	r4, sl
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f04f 0c0a 	mov.w	ip, #10
 8004cae:	4621      	mov	r1, r4
 8004cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb4:	3b30      	subs	r3, #48	; 0x30
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d94e      	bls.n	8004d58 <_vfiprintf_r+0x1c4>
 8004cba:	b1b0      	cbz	r0, 8004cea <_vfiprintf_r+0x156>
 8004cbc:	9207      	str	r2, [sp, #28]
 8004cbe:	e014      	b.n	8004cea <_vfiprintf_r+0x156>
 8004cc0:	eba0 0308 	sub.w	r3, r0, r8
 8004cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	46a2      	mov	sl, r4
 8004cce:	e7d2      	b.n	8004c76 <_vfiprintf_r+0xe2>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	1d19      	adds	r1, r3, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	9103      	str	r1, [sp, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bfbb      	ittet	lt
 8004cdc:	425b      	neglt	r3, r3
 8004cde:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce2:	9307      	strge	r3, [sp, #28]
 8004ce4:	9307      	strlt	r3, [sp, #28]
 8004ce6:	bfb8      	it	lt
 8004ce8:	9204      	strlt	r2, [sp, #16]
 8004cea:	7823      	ldrb	r3, [r4, #0]
 8004cec:	2b2e      	cmp	r3, #46	; 0x2e
 8004cee:	d10c      	bne.n	8004d0a <_vfiprintf_r+0x176>
 8004cf0:	7863      	ldrb	r3, [r4, #1]
 8004cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf4:	d135      	bne.n	8004d62 <_vfiprintf_r+0x1ce>
 8004cf6:	9b03      	ldr	r3, [sp, #12]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	9203      	str	r2, [sp, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfb8      	it	lt
 8004d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d06:	3402      	adds	r4, #2
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004df0 <_vfiprintf_r+0x25c>
 8004d0e:	7821      	ldrb	r1, [r4, #0]
 8004d10:	2203      	movs	r2, #3
 8004d12:	4650      	mov	r0, sl
 8004d14:	f7fb fa74 	bl	8000200 <memchr>
 8004d18:	b140      	cbz	r0, 8004d2c <_vfiprintf_r+0x198>
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	eba0 000a 	sub.w	r0, r0, sl
 8004d20:	fa03 f000 	lsl.w	r0, r3, r0
 8004d24:	9b04      	ldr	r3, [sp, #16]
 8004d26:	4303      	orrs	r3, r0
 8004d28:	3401      	adds	r4, #1
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d30:	482c      	ldr	r0, [pc, #176]	; (8004de4 <_vfiprintf_r+0x250>)
 8004d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d36:	2206      	movs	r2, #6
 8004d38:	f7fb fa62 	bl	8000200 <memchr>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d03f      	beq.n	8004dc0 <_vfiprintf_r+0x22c>
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <_vfiprintf_r+0x254>)
 8004d42:	bb1b      	cbnz	r3, 8004d8c <_vfiprintf_r+0x1f8>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	3307      	adds	r3, #7
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d52:	443b      	add	r3, r7
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	e767      	b.n	8004c28 <_vfiprintf_r+0x94>
 8004d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7a5      	b.n	8004cae <_vfiprintf_r+0x11a>
 8004d62:	2300      	movs	r3, #0
 8004d64:	3401      	adds	r4, #1
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f04f 0c0a 	mov.w	ip, #10
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d74:	3a30      	subs	r2, #48	; 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d903      	bls.n	8004d82 <_vfiprintf_r+0x1ee>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0c5      	beq.n	8004d0a <_vfiprintf_r+0x176>
 8004d7e:	9105      	str	r1, [sp, #20]
 8004d80:	e7c3      	b.n	8004d0a <_vfiprintf_r+0x176>
 8004d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d86:	4604      	mov	r4, r0
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e7f0      	b.n	8004d6e <_vfiprintf_r+0x1da>
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <_vfiprintf_r+0x258>)
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	4630      	mov	r0, r6
 8004d98:	f3af 8000 	nop.w
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	1c78      	adds	r0, r7, #1
 8004da0:	d1d6      	bne.n	8004d50 <_vfiprintf_r+0x1bc>
 8004da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004da4:	07d9      	lsls	r1, r3, #31
 8004da6:	d405      	bmi.n	8004db4 <_vfiprintf_r+0x220>
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	059a      	lsls	r2, r3, #22
 8004dac:	d402      	bmi.n	8004db4 <_vfiprintf_r+0x220>
 8004dae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004db0:	f000 fc45 	bl	800563e <__retarget_lock_release_recursive>
 8004db4:	89ab      	ldrh	r3, [r5, #12]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	f53f af12 	bmi.w	8004be0 <_vfiprintf_r+0x4c>
 8004dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbe:	e711      	b.n	8004be4 <_vfiprintf_r+0x50>
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <_vfiprintf_r+0x258>)
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 f880 	bl	8004ed0 <_printf_i>
 8004dd0:	e7e4      	b.n	8004d9c <_vfiprintf_r+0x208>
 8004dd2:	bf00      	nop
 8004dd4:	08005c74 	.word	0x08005c74
 8004dd8:	08005c94 	.word	0x08005c94
 8004ddc:	08005c54 	.word	0x08005c54
 8004de0:	08005c1e 	.word	0x08005c1e
 8004de4:	08005c28 	.word	0x08005c28
 8004de8:	00000000 	.word	0x00000000
 8004dec:	08004b6f 	.word	0x08004b6f
 8004df0:	08005c24 	.word	0x08005c24

08004df4 <_printf_common>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	4616      	mov	r6, r2
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfb8      	it	lt
 8004e08:	4613      	movlt	r3, r2
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e10:	4607      	mov	r7, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	b10a      	cbz	r2, 8004e1a <_printf_common+0x26>
 8004e16:	3301      	adds	r3, #1
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	0699      	lsls	r1, r3, #26
 8004e1e:	bf42      	ittt	mi
 8004e20:	6833      	ldrmi	r3, [r6, #0]
 8004e22:	3302      	addmi	r3, #2
 8004e24:	6033      	strmi	r3, [r6, #0]
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	f015 0506 	ands.w	r5, r5, #6
 8004e2c:	d106      	bne.n	8004e3c <_printf_common+0x48>
 8004e2e:	f104 0a19 	add.w	sl, r4, #25
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	6832      	ldr	r2, [r6, #0]
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	42ab      	cmp	r3, r5
 8004e3a:	dc26      	bgt.n	8004e8a <_printf_common+0x96>
 8004e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e40:	1e13      	subs	r3, r2, #0
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	bf18      	it	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	0692      	lsls	r2, r2, #26
 8004e4a:	d42b      	bmi.n	8004ea4 <_printf_common+0xb0>
 8004e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e50:	4649      	mov	r1, r9
 8004e52:	4638      	mov	r0, r7
 8004e54:	47c0      	blx	r8
 8004e56:	3001      	adds	r0, #1
 8004e58:	d01e      	beq.n	8004e98 <_printf_common+0xa4>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	68e5      	ldr	r5, [r4, #12]
 8004e5e:	6832      	ldr	r2, [r6, #0]
 8004e60:	f003 0306 	and.w	r3, r3, #6
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	bf08      	it	eq
 8004e68:	1aad      	subeq	r5, r5, r2
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	6922      	ldr	r2, [r4, #16]
 8004e6e:	bf0c      	ite	eq
 8004e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e74:	2500      	movne	r5, #0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	bfc4      	itt	gt
 8004e7a:	1a9b      	subgt	r3, r3, r2
 8004e7c:	18ed      	addgt	r5, r5, r3
 8004e7e:	2600      	movs	r6, #0
 8004e80:	341a      	adds	r4, #26
 8004e82:	42b5      	cmp	r5, r6
 8004e84:	d11a      	bne.n	8004ebc <_printf_common+0xc8>
 8004e86:	2000      	movs	r0, #0
 8004e88:	e008      	b.n	8004e9c <_printf_common+0xa8>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	4649      	mov	r1, r9
 8004e90:	4638      	mov	r0, r7
 8004e92:	47c0      	blx	r8
 8004e94:	3001      	adds	r0, #1
 8004e96:	d103      	bne.n	8004ea0 <_printf_common+0xac>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	e7c6      	b.n	8004e32 <_printf_common+0x3e>
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	2030      	movs	r0, #48	; 0x30
 8004eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eae:	4422      	add	r2, r4
 8004eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb8:	3302      	adds	r3, #2
 8004eba:	e7c7      	b.n	8004e4c <_printf_common+0x58>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d0e6      	beq.n	8004e98 <_printf_common+0xa4>
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7d9      	b.n	8004e82 <_printf_common+0x8e>
	...

08004ed0 <_printf_i>:
 8004ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	7e0f      	ldrb	r7, [r1, #24]
 8004ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed8:	2f78      	cmp	r7, #120	; 0x78
 8004eda:	4691      	mov	r9, r2
 8004edc:	4680      	mov	r8, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee6:	d807      	bhi.n	8004ef8 <_printf_i+0x28>
 8004ee8:	2f62      	cmp	r7, #98	; 0x62
 8004eea:	d80a      	bhi.n	8004f02 <_printf_i+0x32>
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f000 80d8 	beq.w	80050a2 <_printf_i+0x1d2>
 8004ef2:	2f58      	cmp	r7, #88	; 0x58
 8004ef4:	f000 80a3 	beq.w	800503e <_printf_i+0x16e>
 8004ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f00:	e03a      	b.n	8004f78 <_printf_i+0xa8>
 8004f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f06:	2b15      	cmp	r3, #21
 8004f08:	d8f6      	bhi.n	8004ef8 <_printf_i+0x28>
 8004f0a:	a101      	add	r1, pc, #4	; (adr r1, 8004f10 <_printf_i+0x40>)
 8004f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f7d 	.word	0x08004f7d
 8004f18:	08004ef9 	.word	0x08004ef9
 8004f1c:	08004ef9 	.word	0x08004ef9
 8004f20:	08004ef9 	.word	0x08004ef9
 8004f24:	08004ef9 	.word	0x08004ef9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ef9 	.word	0x08004ef9
 8004f30:	08004ef9 	.word	0x08004ef9
 8004f34:	08004ef9 	.word	0x08004ef9
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08005089 	.word	0x08005089
 8004f40:	08004fad 	.word	0x08004fad
 8004f44:	0800506b 	.word	0x0800506b
 8004f48:	08004ef9 	.word	0x08004ef9
 8004f4c:	08004ef9 	.word	0x08004ef9
 8004f50:	080050ab 	.word	0x080050ab
 8004f54:	08004ef9 	.word	0x08004ef9
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004ef9 	.word	0x08004ef9
 8004f60:	08004ef9 	.word	0x08004ef9
 8004f64:	08005073 	.word	0x08005073
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0a3      	b.n	80050c4 <_printf_i+0x1f4>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	6829      	ldr	r1, [r5, #0]
 8004f80:	0606      	lsls	r6, r0, #24
 8004f82:	f101 0304 	add.w	r3, r1, #4
 8004f86:	d50a      	bpl.n	8004f9e <_printf_i+0xce>
 8004f88:	680e      	ldr	r6, [r1, #0]
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	da03      	bge.n	8004f98 <_printf_i+0xc8>
 8004f90:	232d      	movs	r3, #45	; 0x2d
 8004f92:	4276      	negs	r6, r6
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	485e      	ldr	r0, [pc, #376]	; (8005114 <_printf_i+0x244>)
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e019      	b.n	8004fd2 <_printf_i+0x102>
 8004f9e:	680e      	ldr	r6, [r1, #0]
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa6:	bf18      	it	ne
 8004fa8:	b236      	sxthne	r6, r6
 8004faa:	e7ef      	b.n	8004f8c <_printf_i+0xbc>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	1d19      	adds	r1, r3, #4
 8004fb2:	6029      	str	r1, [r5, #0]
 8004fb4:	0601      	lsls	r1, r0, #24
 8004fb6:	d501      	bpl.n	8004fbc <_printf_i+0xec>
 8004fb8:	681e      	ldr	r6, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <_printf_i+0xf2>
 8004fbc:	0646      	lsls	r6, r0, #25
 8004fbe:	d5fb      	bpl.n	8004fb8 <_printf_i+0xe8>
 8004fc0:	881e      	ldrh	r6, [r3, #0]
 8004fc2:	4854      	ldr	r0, [pc, #336]	; (8005114 <_printf_i+0x244>)
 8004fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2308      	moveq	r3, #8
 8004fca:	230a      	movne	r3, #10
 8004fcc:	2100      	movs	r1, #0
 8004fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd2:	6865      	ldr	r5, [r4, #4]
 8004fd4:	60a5      	str	r5, [r4, #8]
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	bfa2      	ittt	ge
 8004fda:	6821      	ldrge	r1, [r4, #0]
 8004fdc:	f021 0104 	bicge.w	r1, r1, #4
 8004fe0:	6021      	strge	r1, [r4, #0]
 8004fe2:	b90e      	cbnz	r6, 8004fe8 <_printf_i+0x118>
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	d04d      	beq.n	8005084 <_printf_i+0x1b4>
 8004fe8:	4615      	mov	r5, r2
 8004fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fee:	fb03 6711 	mls	r7, r3, r1, r6
 8004ff2:	5dc7      	ldrb	r7, [r0, r7]
 8004ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff8:	4637      	mov	r7, r6
 8004ffa:	42bb      	cmp	r3, r7
 8004ffc:	460e      	mov	r6, r1
 8004ffe:	d9f4      	bls.n	8004fea <_printf_i+0x11a>
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10b      	bne.n	800501c <_printf_i+0x14c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07de      	lsls	r6, r3, #31
 8005008:	d508      	bpl.n	800501c <_printf_i+0x14c>
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6861      	ldr	r1, [r4, #4]
 800500e:	4299      	cmp	r1, r3
 8005010:	bfde      	ittt	le
 8005012:	2330      	movle	r3, #48	; 0x30
 8005014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800501c:	1b52      	subs	r2, r2, r5
 800501e:	6122      	str	r2, [r4, #16]
 8005020:	f8cd a000 	str.w	sl, [sp]
 8005024:	464b      	mov	r3, r9
 8005026:	aa03      	add	r2, sp, #12
 8005028:	4621      	mov	r1, r4
 800502a:	4640      	mov	r0, r8
 800502c:	f7ff fee2 	bl	8004df4 <_printf_common>
 8005030:	3001      	adds	r0, #1
 8005032:	d14c      	bne.n	80050ce <_printf_i+0x1fe>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	b004      	add	sp, #16
 800503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503e:	4835      	ldr	r0, [pc, #212]	; (8005114 <_printf_i+0x244>)
 8005040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005044:	6829      	ldr	r1, [r5, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f851 6b04 	ldr.w	r6, [r1], #4
 800504c:	6029      	str	r1, [r5, #0]
 800504e:	061d      	lsls	r5, r3, #24
 8005050:	d514      	bpl.n	800507c <_printf_i+0x1ac>
 8005052:	07df      	lsls	r7, r3, #31
 8005054:	bf44      	itt	mi
 8005056:	f043 0320 	orrmi.w	r3, r3, #32
 800505a:	6023      	strmi	r3, [r4, #0]
 800505c:	b91e      	cbnz	r6, 8005066 <_printf_i+0x196>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f023 0320 	bic.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	2310      	movs	r3, #16
 8005068:	e7b0      	b.n	8004fcc <_printf_i+0xfc>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	2378      	movs	r3, #120	; 0x78
 8005074:	4828      	ldr	r0, [pc, #160]	; (8005118 <_printf_i+0x248>)
 8005076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800507a:	e7e3      	b.n	8005044 <_printf_i+0x174>
 800507c:	0659      	lsls	r1, r3, #25
 800507e:	bf48      	it	mi
 8005080:	b2b6      	uxthmi	r6, r6
 8005082:	e7e6      	b.n	8005052 <_printf_i+0x182>
 8005084:	4615      	mov	r5, r2
 8005086:	e7bb      	b.n	8005000 <_printf_i+0x130>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6826      	ldr	r6, [r4, #0]
 800508c:	6961      	ldr	r1, [r4, #20]
 800508e:	1d18      	adds	r0, r3, #4
 8005090:	6028      	str	r0, [r5, #0]
 8005092:	0635      	lsls	r5, r6, #24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	d501      	bpl.n	800509c <_printf_i+0x1cc>
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0x1d2>
 800509c:	0670      	lsls	r0, r6, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0x1c8>
 80050a0:	8019      	strh	r1, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	4615      	mov	r5, r2
 80050a8:	e7ba      	b.n	8005020 <_printf_i+0x150>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	1d1a      	adds	r2, r3, #4
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7fb f8a2 	bl	8000200 <memchr>
 80050bc:	b108      	cbz	r0, 80050c2 <_printf_i+0x1f2>
 80050be:	1b40      	subs	r0, r0, r5
 80050c0:	6060      	str	r0, [r4, #4]
 80050c2:	6863      	ldr	r3, [r4, #4]
 80050c4:	6123      	str	r3, [r4, #16]
 80050c6:	2300      	movs	r3, #0
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	e7a8      	b.n	8005020 <_printf_i+0x150>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d0ab      	beq.n	8005034 <_printf_i+0x164>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	079b      	lsls	r3, r3, #30
 80050e0:	d413      	bmi.n	800510a <_printf_i+0x23a>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	4298      	cmp	r0, r3
 80050e8:	bfb8      	it	lt
 80050ea:	4618      	movlt	r0, r3
 80050ec:	e7a4      	b.n	8005038 <_printf_i+0x168>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4632      	mov	r2, r6
 80050f2:	4649      	mov	r1, r9
 80050f4:	4640      	mov	r0, r8
 80050f6:	47d0      	blx	sl
 80050f8:	3001      	adds	r0, #1
 80050fa:	d09b      	beq.n	8005034 <_printf_i+0x164>
 80050fc:	3501      	adds	r5, #1
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	9903      	ldr	r1, [sp, #12]
 8005102:	1a5b      	subs	r3, r3, r1
 8005104:	42ab      	cmp	r3, r5
 8005106:	dcf2      	bgt.n	80050ee <_printf_i+0x21e>
 8005108:	e7eb      	b.n	80050e2 <_printf_i+0x212>
 800510a:	2500      	movs	r5, #0
 800510c:	f104 0619 	add.w	r6, r4, #25
 8005110:	e7f5      	b.n	80050fe <_printf_i+0x22e>
 8005112:	bf00      	nop
 8005114:	08005c2f 	.word	0x08005c2f
 8005118:	08005c40 	.word	0x08005c40

0800511c <_sbrk_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d06      	ldr	r5, [pc, #24]	; (8005138 <_sbrk_r+0x1c>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fb fe16 	bl	8000d58 <_sbrk>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_sbrk_r+0x1a>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_sbrk_r+0x1a>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000230 	.word	0x20000230

0800513c <__swbuf_r>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	460e      	mov	r6, r1
 8005140:	4614      	mov	r4, r2
 8005142:	4605      	mov	r5, r0
 8005144:	b118      	cbz	r0, 800514e <__swbuf_r+0x12>
 8005146:	6983      	ldr	r3, [r0, #24]
 8005148:	b90b      	cbnz	r3, 800514e <__swbuf_r+0x12>
 800514a:	f000 f9d9 	bl	8005500 <__sinit>
 800514e:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <__swbuf_r+0x98>)
 8005150:	429c      	cmp	r4, r3
 8005152:	d12b      	bne.n	80051ac <__swbuf_r+0x70>
 8005154:	686c      	ldr	r4, [r5, #4]
 8005156:	69a3      	ldr	r3, [r4, #24]
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	071a      	lsls	r2, r3, #28
 800515e:	d52f      	bpl.n	80051c0 <__swbuf_r+0x84>
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	b36b      	cbz	r3, 80051c0 <__swbuf_r+0x84>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	1ac0      	subs	r0, r0, r3
 800516a:	6963      	ldr	r3, [r4, #20]
 800516c:	b2f6      	uxtb	r6, r6
 800516e:	4283      	cmp	r3, r0
 8005170:	4637      	mov	r7, r6
 8005172:	dc04      	bgt.n	800517e <__swbuf_r+0x42>
 8005174:	4621      	mov	r1, r4
 8005176:	4628      	mov	r0, r5
 8005178:	f000 f92e 	bl	80053d8 <_fflush_r>
 800517c:	bb30      	cbnz	r0, 80051cc <__swbuf_r+0x90>
 800517e:	68a3      	ldr	r3, [r4, #8]
 8005180:	3b01      	subs	r3, #1
 8005182:	60a3      	str	r3, [r4, #8]
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	701e      	strb	r6, [r3, #0]
 800518c:	6963      	ldr	r3, [r4, #20]
 800518e:	3001      	adds	r0, #1
 8005190:	4283      	cmp	r3, r0
 8005192:	d004      	beq.n	800519e <__swbuf_r+0x62>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	07db      	lsls	r3, r3, #31
 8005198:	d506      	bpl.n	80051a8 <__swbuf_r+0x6c>
 800519a:	2e0a      	cmp	r6, #10
 800519c:	d104      	bne.n	80051a8 <__swbuf_r+0x6c>
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 f919 	bl	80053d8 <_fflush_r>
 80051a6:	b988      	cbnz	r0, 80051cc <__swbuf_r+0x90>
 80051a8:	4638      	mov	r0, r7
 80051aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <__swbuf_r+0x9c>)
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d101      	bne.n	80051b6 <__swbuf_r+0x7a>
 80051b2:	68ac      	ldr	r4, [r5, #8]
 80051b4:	e7cf      	b.n	8005156 <__swbuf_r+0x1a>
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <__swbuf_r+0xa0>)
 80051b8:	429c      	cmp	r4, r3
 80051ba:	bf08      	it	eq
 80051bc:	68ec      	ldreq	r4, [r5, #12]
 80051be:	e7ca      	b.n	8005156 <__swbuf_r+0x1a>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 f80c 	bl	80051e0 <__swsetup_r>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d0cb      	beq.n	8005164 <__swbuf_r+0x28>
 80051cc:	f04f 37ff 	mov.w	r7, #4294967295
 80051d0:	e7ea      	b.n	80051a8 <__swbuf_r+0x6c>
 80051d2:	bf00      	nop
 80051d4:	08005c74 	.word	0x08005c74
 80051d8:	08005c94 	.word	0x08005c94
 80051dc:	08005c54 	.word	0x08005c54

080051e0 <__swsetup_r>:
 80051e0:	4b32      	ldr	r3, [pc, #200]	; (80052ac <__swsetup_r+0xcc>)
 80051e2:	b570      	push	{r4, r5, r6, lr}
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	4606      	mov	r6, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	b125      	cbz	r5, 80051f6 <__swsetup_r+0x16>
 80051ec:	69ab      	ldr	r3, [r5, #24]
 80051ee:	b913      	cbnz	r3, 80051f6 <__swsetup_r+0x16>
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f985 	bl	8005500 <__sinit>
 80051f6:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <__swsetup_r+0xd0>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d10f      	bne.n	800521c <__swsetup_r+0x3c>
 80051fc:	686c      	ldr	r4, [r5, #4]
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	0719      	lsls	r1, r3, #28
 8005206:	d42c      	bmi.n	8005262 <__swsetup_r+0x82>
 8005208:	06dd      	lsls	r5, r3, #27
 800520a:	d411      	bmi.n	8005230 <__swsetup_r+0x50>
 800520c:	2309      	movs	r3, #9
 800520e:	6033      	str	r3, [r6, #0]
 8005210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	f04f 30ff 	mov.w	r0, #4294967295
 800521a:	e03e      	b.n	800529a <__swsetup_r+0xba>
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <__swsetup_r+0xd4>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <__swsetup_r+0x46>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7eb      	b.n	80051fe <__swsetup_r+0x1e>
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <__swsetup_r+0xd8>)
 8005228:	429c      	cmp	r4, r3
 800522a:	bf08      	it	eq
 800522c:	68ec      	ldreq	r4, [r5, #12]
 800522e:	e7e6      	b.n	80051fe <__swsetup_r+0x1e>
 8005230:	0758      	lsls	r0, r3, #29
 8005232:	d512      	bpl.n	800525a <__swsetup_r+0x7a>
 8005234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005236:	b141      	cbz	r1, 800524a <__swsetup_r+0x6a>
 8005238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800523c:	4299      	cmp	r1, r3
 800523e:	d002      	beq.n	8005246 <__swsetup_r+0x66>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff fa41 	bl	80046c8 <_free_r>
 8005246:	2300      	movs	r3, #0
 8005248:	6363      	str	r3, [r4, #52]	; 0x34
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	2300      	movs	r3, #0
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	b94b      	cbnz	r3, 800527a <__swsetup_r+0x9a>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800526c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005270:	d003      	beq.n	800527a <__swsetup_r+0x9a>
 8005272:	4621      	mov	r1, r4
 8005274:	4630      	mov	r0, r6
 8005276:	f000 fa09 	bl	800568c <__smakebuf_r>
 800527a:	89a0      	ldrh	r0, [r4, #12]
 800527c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005280:	f010 0301 	ands.w	r3, r0, #1
 8005284:	d00a      	beq.n	800529c <__swsetup_r+0xbc>
 8005286:	2300      	movs	r3, #0
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	6963      	ldr	r3, [r4, #20]
 800528c:	425b      	negs	r3, r3
 800528e:	61a3      	str	r3, [r4, #24]
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b943      	cbnz	r3, 80052a6 <__swsetup_r+0xc6>
 8005294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005298:	d1ba      	bne.n	8005210 <__swsetup_r+0x30>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	0781      	lsls	r1, r0, #30
 800529e:	bf58      	it	pl
 80052a0:	6963      	ldrpl	r3, [r4, #20]
 80052a2:	60a3      	str	r3, [r4, #8]
 80052a4:	e7f4      	b.n	8005290 <__swsetup_r+0xb0>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e7f7      	b.n	800529a <__swsetup_r+0xba>
 80052aa:	bf00      	nop
 80052ac:	20000014 	.word	0x20000014
 80052b0:	08005c74 	.word	0x08005c74
 80052b4:	08005c94 	.word	0x08005c94
 80052b8:	08005c54 	.word	0x08005c54

080052bc <abort>:
 80052bc:	b508      	push	{r3, lr}
 80052be:	2006      	movs	r0, #6
 80052c0:	f000 faa2 	bl	8005808 <raise>
 80052c4:	2001      	movs	r0, #1
 80052c6:	f7fb fccf 	bl	8000c68 <_exit>
	...

080052cc <__sflush_r>:
 80052cc:	898a      	ldrh	r2, [r1, #12]
 80052ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d2:	4605      	mov	r5, r0
 80052d4:	0710      	lsls	r0, r2, #28
 80052d6:	460c      	mov	r4, r1
 80052d8:	d458      	bmi.n	800538c <__sflush_r+0xc0>
 80052da:	684b      	ldr	r3, [r1, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	dc05      	bgt.n	80052ec <__sflush_r+0x20>
 80052e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dc02      	bgt.n	80052ec <__sflush_r+0x20>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d0f9      	beq.n	80052e6 <__sflush_r+0x1a>
 80052f2:	2300      	movs	r3, #0
 80052f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052f8:	682f      	ldr	r7, [r5, #0]
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	d032      	beq.n	8005364 <__sflush_r+0x98>
 80052fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	075a      	lsls	r2, r3, #29
 8005304:	d505      	bpl.n	8005312 <__sflush_r+0x46>
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	1ac0      	subs	r0, r0, r3
 800530a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800530c:	b10b      	cbz	r3, 8005312 <__sflush_r+0x46>
 800530e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005310:	1ac0      	subs	r0, r0, r3
 8005312:	2300      	movs	r3, #0
 8005314:	4602      	mov	r2, r0
 8005316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005318:	6a21      	ldr	r1, [r4, #32]
 800531a:	4628      	mov	r0, r5
 800531c:	47b0      	blx	r6
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	d106      	bne.n	8005332 <__sflush_r+0x66>
 8005324:	6829      	ldr	r1, [r5, #0]
 8005326:	291d      	cmp	r1, #29
 8005328:	d82c      	bhi.n	8005384 <__sflush_r+0xb8>
 800532a:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <__sflush_r+0x108>)
 800532c:	40ca      	lsrs	r2, r1
 800532e:	07d6      	lsls	r6, r2, #31
 8005330:	d528      	bpl.n	8005384 <__sflush_r+0xb8>
 8005332:	2200      	movs	r2, #0
 8005334:	6062      	str	r2, [r4, #4]
 8005336:	04d9      	lsls	r1, r3, #19
 8005338:	6922      	ldr	r2, [r4, #16]
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	d504      	bpl.n	8005348 <__sflush_r+0x7c>
 800533e:	1c42      	adds	r2, r0, #1
 8005340:	d101      	bne.n	8005346 <__sflush_r+0x7a>
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	b903      	cbnz	r3, 8005348 <__sflush_r+0x7c>
 8005346:	6560      	str	r0, [r4, #84]	; 0x54
 8005348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800534a:	602f      	str	r7, [r5, #0]
 800534c:	2900      	cmp	r1, #0
 800534e:	d0ca      	beq.n	80052e6 <__sflush_r+0x1a>
 8005350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005354:	4299      	cmp	r1, r3
 8005356:	d002      	beq.n	800535e <__sflush_r+0x92>
 8005358:	4628      	mov	r0, r5
 800535a:	f7ff f9b5 	bl	80046c8 <_free_r>
 800535e:	2000      	movs	r0, #0
 8005360:	6360      	str	r0, [r4, #52]	; 0x34
 8005362:	e7c1      	b.n	80052e8 <__sflush_r+0x1c>
 8005364:	6a21      	ldr	r1, [r4, #32]
 8005366:	2301      	movs	r3, #1
 8005368:	4628      	mov	r0, r5
 800536a:	47b0      	blx	r6
 800536c:	1c41      	adds	r1, r0, #1
 800536e:	d1c7      	bne.n	8005300 <__sflush_r+0x34>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0c4      	beq.n	8005300 <__sflush_r+0x34>
 8005376:	2b1d      	cmp	r3, #29
 8005378:	d001      	beq.n	800537e <__sflush_r+0xb2>
 800537a:	2b16      	cmp	r3, #22
 800537c:	d101      	bne.n	8005382 <__sflush_r+0xb6>
 800537e:	602f      	str	r7, [r5, #0]
 8005380:	e7b1      	b.n	80052e6 <__sflush_r+0x1a>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	e7ad      	b.n	80052e8 <__sflush_r+0x1c>
 800538c:	690f      	ldr	r7, [r1, #16]
 800538e:	2f00      	cmp	r7, #0
 8005390:	d0a9      	beq.n	80052e6 <__sflush_r+0x1a>
 8005392:	0793      	lsls	r3, r2, #30
 8005394:	680e      	ldr	r6, [r1, #0]
 8005396:	bf08      	it	eq
 8005398:	694b      	ldreq	r3, [r1, #20]
 800539a:	600f      	str	r7, [r1, #0]
 800539c:	bf18      	it	ne
 800539e:	2300      	movne	r3, #0
 80053a0:	eba6 0807 	sub.w	r8, r6, r7
 80053a4:	608b      	str	r3, [r1, #8]
 80053a6:	f1b8 0f00 	cmp.w	r8, #0
 80053aa:	dd9c      	ble.n	80052e6 <__sflush_r+0x1a>
 80053ac:	6a21      	ldr	r1, [r4, #32]
 80053ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053b0:	4643      	mov	r3, r8
 80053b2:	463a      	mov	r2, r7
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b0      	blx	r6
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dc06      	bgt.n	80053ca <__sflush_r+0xfe>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c2:	81a3      	strh	r3, [r4, #12]
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e78e      	b.n	80052e8 <__sflush_r+0x1c>
 80053ca:	4407      	add	r7, r0
 80053cc:	eba8 0800 	sub.w	r8, r8, r0
 80053d0:	e7e9      	b.n	80053a6 <__sflush_r+0xda>
 80053d2:	bf00      	nop
 80053d4:	20400001 	.word	0x20400001

080053d8 <_fflush_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	690b      	ldr	r3, [r1, #16]
 80053dc:	4605      	mov	r5, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	b913      	cbnz	r3, 80053e8 <_fflush_r+0x10>
 80053e2:	2500      	movs	r5, #0
 80053e4:	4628      	mov	r0, r5
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	b118      	cbz	r0, 80053f2 <_fflush_r+0x1a>
 80053ea:	6983      	ldr	r3, [r0, #24]
 80053ec:	b90b      	cbnz	r3, 80053f2 <_fflush_r+0x1a>
 80053ee:	f000 f887 	bl	8005500 <__sinit>
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <_fflush_r+0x6c>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d11b      	bne.n	8005430 <_fflush_r+0x58>
 80053f8:	686c      	ldr	r4, [r5, #4]
 80053fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ef      	beq.n	80053e2 <_fflush_r+0xa>
 8005402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005404:	07d0      	lsls	r0, r2, #31
 8005406:	d404      	bmi.n	8005412 <_fflush_r+0x3a>
 8005408:	0599      	lsls	r1, r3, #22
 800540a:	d402      	bmi.n	8005412 <_fflush_r+0x3a>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f000 f915 	bl	800563c <__retarget_lock_acquire_recursive>
 8005412:	4628      	mov	r0, r5
 8005414:	4621      	mov	r1, r4
 8005416:	f7ff ff59 	bl	80052cc <__sflush_r>
 800541a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800541c:	07da      	lsls	r2, r3, #31
 800541e:	4605      	mov	r5, r0
 8005420:	d4e0      	bmi.n	80053e4 <_fflush_r+0xc>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	059b      	lsls	r3, r3, #22
 8005426:	d4dd      	bmi.n	80053e4 <_fflush_r+0xc>
 8005428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800542a:	f000 f908 	bl	800563e <__retarget_lock_release_recursive>
 800542e:	e7d9      	b.n	80053e4 <_fflush_r+0xc>
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <_fflush_r+0x70>)
 8005432:	429c      	cmp	r4, r3
 8005434:	d101      	bne.n	800543a <_fflush_r+0x62>
 8005436:	68ac      	ldr	r4, [r5, #8]
 8005438:	e7df      	b.n	80053fa <_fflush_r+0x22>
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <_fflush_r+0x74>)
 800543c:	429c      	cmp	r4, r3
 800543e:	bf08      	it	eq
 8005440:	68ec      	ldreq	r4, [r5, #12]
 8005442:	e7da      	b.n	80053fa <_fflush_r+0x22>
 8005444:	08005c74 	.word	0x08005c74
 8005448:	08005c94 	.word	0x08005c94
 800544c:	08005c54 	.word	0x08005c54

08005450 <std>:
 8005450:	2300      	movs	r3, #0
 8005452:	b510      	push	{r4, lr}
 8005454:	4604      	mov	r4, r0
 8005456:	e9c0 3300 	strd	r3, r3, [r0]
 800545a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800545e:	6083      	str	r3, [r0, #8]
 8005460:	8181      	strh	r1, [r0, #12]
 8005462:	6643      	str	r3, [r0, #100]	; 0x64
 8005464:	81c2      	strh	r2, [r0, #14]
 8005466:	6183      	str	r3, [r0, #24]
 8005468:	4619      	mov	r1, r3
 800546a:	2208      	movs	r2, #8
 800546c:	305c      	adds	r0, #92	; 0x5c
 800546e:	f7ff f88d 	bl	800458c <memset>
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <std+0x38>)
 8005474:	6263      	str	r3, [r4, #36]	; 0x24
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <std+0x3c>)
 8005478:	62a3      	str	r3, [r4, #40]	; 0x28
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <std+0x40>)
 800547c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <std+0x44>)
 8005480:	6224      	str	r4, [r4, #32]
 8005482:	6323      	str	r3, [r4, #48]	; 0x30
 8005484:	bd10      	pop	{r4, pc}
 8005486:	bf00      	nop
 8005488:	08005841 	.word	0x08005841
 800548c:	08005863 	.word	0x08005863
 8005490:	0800589b 	.word	0x0800589b
 8005494:	080058bf 	.word	0x080058bf

08005498 <_cleanup_r>:
 8005498:	4901      	ldr	r1, [pc, #4]	; (80054a0 <_cleanup_r+0x8>)
 800549a:	f000 b8af 	b.w	80055fc <_fwalk_reent>
 800549e:	bf00      	nop
 80054a0:	080053d9 	.word	0x080053d9

080054a4 <__sfmoreglue>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	2268      	movs	r2, #104	; 0x68
 80054a8:	1e4d      	subs	r5, r1, #1
 80054aa:	4355      	muls	r5, r2
 80054ac:	460e      	mov	r6, r1
 80054ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054b2:	f7ff f975 	bl	80047a0 <_malloc_r>
 80054b6:	4604      	mov	r4, r0
 80054b8:	b140      	cbz	r0, 80054cc <__sfmoreglue+0x28>
 80054ba:	2100      	movs	r1, #0
 80054bc:	e9c0 1600 	strd	r1, r6, [r0]
 80054c0:	300c      	adds	r0, #12
 80054c2:	60a0      	str	r0, [r4, #8]
 80054c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054c8:	f7ff f860 	bl	800458c <memset>
 80054cc:	4620      	mov	r0, r4
 80054ce:	bd70      	pop	{r4, r5, r6, pc}

080054d0 <__sfp_lock_acquire>:
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <__sfp_lock_acquire+0x8>)
 80054d2:	f000 b8b3 	b.w	800563c <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	2000022d 	.word	0x2000022d

080054dc <__sfp_lock_release>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__sfp_lock_release+0x8>)
 80054de:	f000 b8ae 	b.w	800563e <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	2000022d 	.word	0x2000022d

080054e8 <__sinit_lock_acquire>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__sinit_lock_acquire+0x8>)
 80054ea:	f000 b8a7 	b.w	800563c <__retarget_lock_acquire_recursive>
 80054ee:	bf00      	nop
 80054f0:	2000022e 	.word	0x2000022e

080054f4 <__sinit_lock_release>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__sinit_lock_release+0x8>)
 80054f6:	f000 b8a2 	b.w	800563e <__retarget_lock_release_recursive>
 80054fa:	bf00      	nop
 80054fc:	2000022e 	.word	0x2000022e

08005500 <__sinit>:
 8005500:	b510      	push	{r4, lr}
 8005502:	4604      	mov	r4, r0
 8005504:	f7ff fff0 	bl	80054e8 <__sinit_lock_acquire>
 8005508:	69a3      	ldr	r3, [r4, #24]
 800550a:	b11b      	cbz	r3, 8005514 <__sinit+0x14>
 800550c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005510:	f7ff bff0 	b.w	80054f4 <__sinit_lock_release>
 8005514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005518:	6523      	str	r3, [r4, #80]	; 0x50
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <__sinit+0x68>)
 800551c:	4a13      	ldr	r2, [pc, #76]	; (800556c <__sinit+0x6c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	62a2      	str	r2, [r4, #40]	; 0x28
 8005522:	42a3      	cmp	r3, r4
 8005524:	bf04      	itt	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	61a3      	streq	r3, [r4, #24]
 800552a:	4620      	mov	r0, r4
 800552c:	f000 f820 	bl	8005570 <__sfp>
 8005530:	6060      	str	r0, [r4, #4]
 8005532:	4620      	mov	r0, r4
 8005534:	f000 f81c 	bl	8005570 <__sfp>
 8005538:	60a0      	str	r0, [r4, #8]
 800553a:	4620      	mov	r0, r4
 800553c:	f000 f818 	bl	8005570 <__sfp>
 8005540:	2200      	movs	r2, #0
 8005542:	60e0      	str	r0, [r4, #12]
 8005544:	2104      	movs	r1, #4
 8005546:	6860      	ldr	r0, [r4, #4]
 8005548:	f7ff ff82 	bl	8005450 <std>
 800554c:	68a0      	ldr	r0, [r4, #8]
 800554e:	2201      	movs	r2, #1
 8005550:	2109      	movs	r1, #9
 8005552:	f7ff ff7d 	bl	8005450 <std>
 8005556:	68e0      	ldr	r0, [r4, #12]
 8005558:	2202      	movs	r2, #2
 800555a:	2112      	movs	r1, #18
 800555c:	f7ff ff78 	bl	8005450 <std>
 8005560:	2301      	movs	r3, #1
 8005562:	61a3      	str	r3, [r4, #24]
 8005564:	e7d2      	b.n	800550c <__sinit+0xc>
 8005566:	bf00      	nop
 8005568:	08005b6c 	.word	0x08005b6c
 800556c:	08005499 	.word	0x08005499

08005570 <__sfp>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	4607      	mov	r7, r0
 8005574:	f7ff ffac 	bl	80054d0 <__sfp_lock_acquire>
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <__sfp+0x84>)
 800557a:	681e      	ldr	r6, [r3, #0]
 800557c:	69b3      	ldr	r3, [r6, #24]
 800557e:	b913      	cbnz	r3, 8005586 <__sfp+0x16>
 8005580:	4630      	mov	r0, r6
 8005582:	f7ff ffbd 	bl	8005500 <__sinit>
 8005586:	3648      	adds	r6, #72	; 0x48
 8005588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800558c:	3b01      	subs	r3, #1
 800558e:	d503      	bpl.n	8005598 <__sfp+0x28>
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	b30b      	cbz	r3, 80055d8 <__sfp+0x68>
 8005594:	6836      	ldr	r6, [r6, #0]
 8005596:	e7f7      	b.n	8005588 <__sfp+0x18>
 8005598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800559c:	b9d5      	cbnz	r5, 80055d4 <__sfp+0x64>
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <__sfp+0x88>)
 80055a0:	60e3      	str	r3, [r4, #12]
 80055a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055a6:	6665      	str	r5, [r4, #100]	; 0x64
 80055a8:	f000 f847 	bl	800563a <__retarget_lock_init_recursive>
 80055ac:	f7ff ff96 	bl	80054dc <__sfp_lock_release>
 80055b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055b8:	6025      	str	r5, [r4, #0]
 80055ba:	61a5      	str	r5, [r4, #24]
 80055bc:	2208      	movs	r2, #8
 80055be:	4629      	mov	r1, r5
 80055c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055c4:	f7fe ffe2 	bl	800458c <memset>
 80055c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055d0:	4620      	mov	r0, r4
 80055d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d4:	3468      	adds	r4, #104	; 0x68
 80055d6:	e7d9      	b.n	800558c <__sfp+0x1c>
 80055d8:	2104      	movs	r1, #4
 80055da:	4638      	mov	r0, r7
 80055dc:	f7ff ff62 	bl	80054a4 <__sfmoreglue>
 80055e0:	4604      	mov	r4, r0
 80055e2:	6030      	str	r0, [r6, #0]
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d1d5      	bne.n	8005594 <__sfp+0x24>
 80055e8:	f7ff ff78 	bl	80054dc <__sfp_lock_release>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	e7ee      	b.n	80055d0 <__sfp+0x60>
 80055f2:	bf00      	nop
 80055f4:	08005b6c 	.word	0x08005b6c
 80055f8:	ffff0001 	.word	0xffff0001

080055fc <_fwalk_reent>:
 80055fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005600:	4606      	mov	r6, r0
 8005602:	4688      	mov	r8, r1
 8005604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005608:	2700      	movs	r7, #0
 800560a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800560e:	f1b9 0901 	subs.w	r9, r9, #1
 8005612:	d505      	bpl.n	8005620 <_fwalk_reent+0x24>
 8005614:	6824      	ldr	r4, [r4, #0]
 8005616:	2c00      	cmp	r4, #0
 8005618:	d1f7      	bne.n	800560a <_fwalk_reent+0xe>
 800561a:	4638      	mov	r0, r7
 800561c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005620:	89ab      	ldrh	r3, [r5, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d907      	bls.n	8005636 <_fwalk_reent+0x3a>
 8005626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800562a:	3301      	adds	r3, #1
 800562c:	d003      	beq.n	8005636 <_fwalk_reent+0x3a>
 800562e:	4629      	mov	r1, r5
 8005630:	4630      	mov	r0, r6
 8005632:	47c0      	blx	r8
 8005634:	4307      	orrs	r7, r0
 8005636:	3568      	adds	r5, #104	; 0x68
 8005638:	e7e9      	b.n	800560e <_fwalk_reent+0x12>

0800563a <__retarget_lock_init_recursive>:
 800563a:	4770      	bx	lr

0800563c <__retarget_lock_acquire_recursive>:
 800563c:	4770      	bx	lr

0800563e <__retarget_lock_release_recursive>:
 800563e:	4770      	bx	lr

08005640 <__swhatbuf_r>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	460e      	mov	r6, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	2900      	cmp	r1, #0
 800564a:	b096      	sub	sp, #88	; 0x58
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	da08      	bge.n	8005664 <__swhatbuf_r+0x24>
 8005652:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	061a      	lsls	r2, r3, #24
 800565c:	d410      	bmi.n	8005680 <__swhatbuf_r+0x40>
 800565e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005662:	e00e      	b.n	8005682 <__swhatbuf_r+0x42>
 8005664:	466a      	mov	r2, sp
 8005666:	f000 f951 	bl	800590c <_fstat_r>
 800566a:	2800      	cmp	r0, #0
 800566c:	dbf1      	blt.n	8005652 <__swhatbuf_r+0x12>
 800566e:	9a01      	ldr	r2, [sp, #4]
 8005670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005678:	425a      	negs	r2, r3
 800567a:	415a      	adcs	r2, r3
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	e7ee      	b.n	800565e <__swhatbuf_r+0x1e>
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	2000      	movs	r0, #0
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	b016      	add	sp, #88	; 0x58
 8005688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800568c <__smakebuf_r>:
 800568c:	898b      	ldrh	r3, [r1, #12]
 800568e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005690:	079d      	lsls	r5, r3, #30
 8005692:	4606      	mov	r6, r0
 8005694:	460c      	mov	r4, r1
 8005696:	d507      	bpl.n	80056a8 <__smakebuf_r+0x1c>
 8005698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	2301      	movs	r3, #1
 80056a2:	6163      	str	r3, [r4, #20]
 80056a4:	b002      	add	sp, #8
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	ab01      	add	r3, sp, #4
 80056aa:	466a      	mov	r2, sp
 80056ac:	f7ff ffc8 	bl	8005640 <__swhatbuf_r>
 80056b0:	9900      	ldr	r1, [sp, #0]
 80056b2:	4605      	mov	r5, r0
 80056b4:	4630      	mov	r0, r6
 80056b6:	f7ff f873 	bl	80047a0 <_malloc_r>
 80056ba:	b948      	cbnz	r0, 80056d0 <__smakebuf_r+0x44>
 80056bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c0:	059a      	lsls	r2, r3, #22
 80056c2:	d4ef      	bmi.n	80056a4 <__smakebuf_r+0x18>
 80056c4:	f023 0303 	bic.w	r3, r3, #3
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	e7e3      	b.n	8005698 <__smakebuf_r+0xc>
 80056d0:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <__smakebuf_r+0x7c>)
 80056d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	6020      	str	r0, [r4, #0]
 80056d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	9b00      	ldr	r3, [sp, #0]
 80056e0:	6163      	str	r3, [r4, #20]
 80056e2:	9b01      	ldr	r3, [sp, #4]
 80056e4:	6120      	str	r0, [r4, #16]
 80056e6:	b15b      	cbz	r3, 8005700 <__smakebuf_r+0x74>
 80056e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f91f 	bl	8005930 <_isatty_r>
 80056f2:	b128      	cbz	r0, 8005700 <__smakebuf_r+0x74>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	89a0      	ldrh	r0, [r4, #12]
 8005702:	4305      	orrs	r5, r0
 8005704:	81a5      	strh	r5, [r4, #12]
 8005706:	e7cd      	b.n	80056a4 <__smakebuf_r+0x18>
 8005708:	08005499 	.word	0x08005499

0800570c <memmove>:
 800570c:	4288      	cmp	r0, r1
 800570e:	b510      	push	{r4, lr}
 8005710:	eb01 0402 	add.w	r4, r1, r2
 8005714:	d902      	bls.n	800571c <memmove+0x10>
 8005716:	4284      	cmp	r4, r0
 8005718:	4623      	mov	r3, r4
 800571a:	d807      	bhi.n	800572c <memmove+0x20>
 800571c:	1e43      	subs	r3, r0, #1
 800571e:	42a1      	cmp	r1, r4
 8005720:	d008      	beq.n	8005734 <memmove+0x28>
 8005722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800572a:	e7f8      	b.n	800571e <memmove+0x12>
 800572c:	4402      	add	r2, r0
 800572e:	4601      	mov	r1, r0
 8005730:	428a      	cmp	r2, r1
 8005732:	d100      	bne.n	8005736 <memmove+0x2a>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800573a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800573e:	e7f7      	b.n	8005730 <memmove+0x24>

08005740 <__malloc_lock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_lock+0x8>)
 8005742:	f7ff bf7b 	b.w	800563c <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	2000022c 	.word	0x2000022c

0800574c <__malloc_unlock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_unlock+0x8>)
 800574e:	f7ff bf76 	b.w	800563e <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	2000022c 	.word	0x2000022c

08005758 <_realloc_r>:
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	4680      	mov	r8, r0
 800575e:	4614      	mov	r4, r2
 8005760:	460e      	mov	r6, r1
 8005762:	b921      	cbnz	r1, 800576e <_realloc_r+0x16>
 8005764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4611      	mov	r1, r2
 800576a:	f7ff b819 	b.w	80047a0 <_malloc_r>
 800576e:	b92a      	cbnz	r2, 800577c <_realloc_r+0x24>
 8005770:	f7fe ffaa 	bl	80046c8 <_free_r>
 8005774:	4625      	mov	r5, r4
 8005776:	4628      	mov	r0, r5
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577c:	f000 f8fa 	bl	8005974 <_malloc_usable_size_r>
 8005780:	4284      	cmp	r4, r0
 8005782:	4607      	mov	r7, r0
 8005784:	d802      	bhi.n	800578c <_realloc_r+0x34>
 8005786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800578a:	d812      	bhi.n	80057b2 <_realloc_r+0x5a>
 800578c:	4621      	mov	r1, r4
 800578e:	4640      	mov	r0, r8
 8005790:	f7ff f806 	bl	80047a0 <_malloc_r>
 8005794:	4605      	mov	r5, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d0ed      	beq.n	8005776 <_realloc_r+0x1e>
 800579a:	42bc      	cmp	r4, r7
 800579c:	4622      	mov	r2, r4
 800579e:	4631      	mov	r1, r6
 80057a0:	bf28      	it	cs
 80057a2:	463a      	movcs	r2, r7
 80057a4:	f7fe fee4 	bl	8004570 <memcpy>
 80057a8:	4631      	mov	r1, r6
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7fe ff8c 	bl	80046c8 <_free_r>
 80057b0:	e7e1      	b.n	8005776 <_realloc_r+0x1e>
 80057b2:	4635      	mov	r5, r6
 80057b4:	e7df      	b.n	8005776 <_realloc_r+0x1e>

080057b6 <_raise_r>:
 80057b6:	291f      	cmp	r1, #31
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	460d      	mov	r5, r1
 80057be:	d904      	bls.n	80057ca <_raise_r+0x14>
 80057c0:	2316      	movs	r3, #22
 80057c2:	6003      	str	r3, [r0, #0]
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	bd38      	pop	{r3, r4, r5, pc}
 80057ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057cc:	b112      	cbz	r2, 80057d4 <_raise_r+0x1e>
 80057ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057d2:	b94b      	cbnz	r3, 80057e8 <_raise_r+0x32>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f831 	bl	800583c <_getpid_r>
 80057da:	462a      	mov	r2, r5
 80057dc:	4601      	mov	r1, r0
 80057de:	4620      	mov	r0, r4
 80057e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e4:	f000 b818 	b.w	8005818 <_kill_r>
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d00a      	beq.n	8005802 <_raise_r+0x4c>
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	d103      	bne.n	80057f8 <_raise_r+0x42>
 80057f0:	2316      	movs	r3, #22
 80057f2:	6003      	str	r3, [r0, #0]
 80057f4:	2001      	movs	r0, #1
 80057f6:	e7e7      	b.n	80057c8 <_raise_r+0x12>
 80057f8:	2400      	movs	r4, #0
 80057fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057fe:	4628      	mov	r0, r5
 8005800:	4798      	blx	r3
 8005802:	2000      	movs	r0, #0
 8005804:	e7e0      	b.n	80057c8 <_raise_r+0x12>
	...

08005808 <raise>:
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <raise+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f7ff bfd2 	b.w	80057b6 <_raise_r>
 8005812:	bf00      	nop
 8005814:	20000014 	.word	0x20000014

08005818 <_kill_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_kill_r+0x20>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fb fa0f 	bl	8000c48 <_kill>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_kill_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_kill_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	20000230 	.word	0x20000230

0800583c <_getpid_r>:
 800583c:	f7fb b9fc 	b.w	8000c38 <_getpid>

08005840 <__sread>:
 8005840:	b510      	push	{r4, lr}
 8005842:	460c      	mov	r4, r1
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	f000 f89c 	bl	8005984 <_read_r>
 800584c:	2800      	cmp	r0, #0
 800584e:	bfab      	itete	ge
 8005850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005852:	89a3      	ldrhlt	r3, [r4, #12]
 8005854:	181b      	addge	r3, r3, r0
 8005856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800585a:	bfac      	ite	ge
 800585c:	6563      	strge	r3, [r4, #84]	; 0x54
 800585e:	81a3      	strhlt	r3, [r4, #12]
 8005860:	bd10      	pop	{r4, pc}

08005862 <__swrite>:
 8005862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	461f      	mov	r7, r3
 8005868:	898b      	ldrh	r3, [r1, #12]
 800586a:	05db      	lsls	r3, r3, #23
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4616      	mov	r6, r2
 8005872:	d505      	bpl.n	8005880 <__swrite+0x1e>
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	2302      	movs	r3, #2
 800587a:	2200      	movs	r2, #0
 800587c:	f000 f868 	bl	8005950 <_lseek_r>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	4628      	mov	r0, r5
 8005892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	f000 b817 	b.w	80058c8 <_write_r>

0800589a <__sseek>:
 800589a:	b510      	push	{r4, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a2:	f000 f855 	bl	8005950 <_lseek_r>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	bf15      	itete	ne
 80058ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058b6:	81a3      	strheq	r3, [r4, #12]
 80058b8:	bf18      	it	ne
 80058ba:	81a3      	strhne	r3, [r4, #12]
 80058bc:	bd10      	pop	{r4, pc}

080058be <__sclose>:
 80058be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c2:	f000 b813 	b.w	80058ec <_close_r>
	...

080058c8 <_write_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	; (80058e8 <_write_r+0x20>)
 80058cc:	4604      	mov	r4, r0
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f7fb f9ed 	bl	8000cb6 <_write>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_write_r+0x1e>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_write_r+0x1e>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	20000230 	.word	0x20000230

080058ec <_close_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_close_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb f9f9 	bl	8000cee <_close>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_close_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_close_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000230 	.word	0x20000230

0800590c <_fstat_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_fstat_r+0x20>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	f7fb f9f4 	bl	8000d06 <_fstat>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d102      	bne.n	8005928 <_fstat_r+0x1c>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	b103      	cbz	r3, 8005928 <_fstat_r+0x1c>
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	20000230 	.word	0x20000230

08005930 <_isatty_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	; (800594c <_isatty_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb f9f3 	bl	8000d26 <_isatty>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_isatty_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_isatty_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20000230 	.word	0x20000230

08005950 <_lseek_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	; (8005970 <_lseek_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fb f9ec 	bl	8000d3c <_lseek>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_lseek_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_lseek_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000230 	.word	0x20000230

08005974 <_malloc_usable_size_r>:
 8005974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005978:	1f18      	subs	r0, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfbc      	itt	lt
 800597e:	580b      	ldrlt	r3, [r1, r0]
 8005980:	18c0      	addlt	r0, r0, r3
 8005982:	4770      	bx	lr

08005984 <_read_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_read_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fb f972 	bl	8000c7c <_read>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_read_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_read_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20000230 	.word	0x20000230

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
